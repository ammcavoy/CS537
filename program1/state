PROC(5)                                                                                 Linux Programmer's Manual                                                                                PROC(5)

NNAAMMEE
       proc - process information pseudo-filesystem

DDEESSCCRRIIPPTTIIOONN
       The pprroocc filesystem is a pseudo-filesystem which provides an interface to kernel data structures.  It is commonly mounted at _/_p_r_o_c.  Typically, it is mounted automatically by the system, but it
       can also be mounted manually using a command such as:

           mount -t proc proc /proc

       Most of the files in the pprroocc filesystem are read-only, but some files are writable, allowing kernel variables to be changed.

   MMoouunntt ooppttiioonnss
       The pprroocc filesystem supports the following mount options:

       hhiiddeeppiidd=_n (since Linux 3.3)
              This option controls who can access the information in _/_p_r_o_c_/_[_p_i_d_] directories.  The argument, _n, is one of the following values:

              0   Everybody may access all _/_p_r_o_c_/_[_p_i_d_] directories.  This is the traditional behavior, and the default if this mount option is not specified.

              1   Users may not access files and subdirectories inside any _/_p_r_o_c_/_[_p_i_d_] directories but their own (the _/_p_r_o_c_/_[_p_i_d_] directories themselves  remain  visible).   Sensitive  files  such  as
                  _/_p_r_o_c_/_[_p_i_d_]_/_c_m_d_l_i_n_e  and  _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s  are now protected against other users.  This makes it impossible to learn whether any user is running a specific program (so long as the
                  program doesn't otherwise reveal itself by its behavior).

              2   As for mode 1, but in addition the _/_p_r_o_c_/_[_p_i_d_] directories belonging to other users become invisible.  This means that _/_p_r_o_c_/_[_p_i_d_] entries can no longer be used to discover the  PIDs
                  on  the  system.   This  doesn't  hide  the  fact  that  a process with a specific PID value exists (it can be learned by other means, for example, by "kill -0 $PID"), but it hides a
                  process's UID and GID, which could otherwise be learned by employing ssttaatt(2) on a _/_p_r_o_c_/_[_p_i_d_] directory.  This greatly complicates an attacker's task of gathering  information  about
                  running  processes (e.g., discovering whether some daemon is running with elevated privileges, whether another user is running some sensitive program, whether other users are running
                  any program at all, and so on).

       ggiidd=_g_i_d (since Linux 3.3)
              Specifies the ID of a group whose members are authorized to learn process information otherwise prohibited by hhiiddeeppiidd (i.e., users in this group behave as though _/_p_r_o_c was  mounted  with
              _h_i_d_e_p_i_d_=_0).  This group should be used instead of approaches such as putting nonroot users into the ssuuddooeerrss(5) file.

   OOvveerrvviieeww
       Underneath _/_p_r_o_c, there are the following general groups of files and subdirectories:

       _/_p_r_o_c_/_[_p_i_d_] subdirectories
              Each one of these subdirectories contains files and subdirectories exposing information about the process with the corresponding process ID.

              Underneath  each  of the _/_p_r_o_c_/_[_p_i_d_] directories, a _t_a_s_k subdirectory contains subdirectories of the form _t_a_s_k_/_[_t_i_d_], which contain corresponding information about each of the threads in
              the process, where _t_i_d is the kernel thread ID of the thread.

              The _/_p_r_o_c_/_[_p_i_d_] subdirectories are visible when iterating through _/_p_r_o_c with ggeettddeennttss(2) (and thus are visible when one uses llss(1) to view the contents of _/_p_r_o_c).

       _/_p_r_o_c_/_[_t_i_d_] subdirectories
              Each one of these subdirectories contains files and subdirectories exposing information about the thread with the corresponding thread ID.  The contents of these directories are the same
              as the corresponding _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_] directories.

              The _/_p_r_o_c_/_[_t_i_d_] subdirectories are _n_o_t visible when iterating through _/_p_r_o_c with ggeettddeennttss(2) (and thus are _n_o_t visible when one uses llss(1) to view the contents of _/_p_r_o_c).

       _/_p_r_o_c_/_s_e_l_f
              When a process accesses this magic symbolic link, it resolves to the process's own _/_p_r_o_c_/_[_p_i_d_] directory.

       _/_p_r_o_c_/_t_h_r_e_a_d_-_s_e_l_f
              When a thread accesses this magic symbolic link, it resolves to the process's own _/_p_r_o_c_/_s_e_l_f_/_t_a_s_k_/_[_t_i_d_] directory.

       _/_p_r_o_c_/_[_a_-_z_]_*
              Various other files and subdirectories under _/_p_r_o_c expose system-wide information.

       All of the above are described in more detail below.

   FFiilleess aanndd ddiirreeccttoorriieess
       The following list provides details of many of the files and directories under the _/_p_r_o_c hierarchy.

       _/_p_r_o_c_/_[_p_i_d_]
              There  is  a  numerical  subdirectory  for each running process; the subdirectory is named by the process ID.  Each _/_p_r_o_c_/_[_p_i_d_] subdirectory contains the pseudo-files and directories de‐
              scribed below.

              The files inside each _/_p_r_o_c_/_[_p_i_d_] directory are normally owned by the effective user and effective group ID of the process.  However,  as  a  security  measure,  the  ownership  is  made
              _r_o_o_t_:_r_o_o_t if the process's "dumpable" attribute is set to a value other than 1.

              Before Linux 4.11, _r_o_o_t_:_r_o_o_t meant the "global" root user ID and group ID (i.e., UID 0 and GID 0 in the initial user namespace).  Since Linux 4.11, if the process is in a noninitial user
              namespace that has a valid mapping for user (group) ID 0 inside the namespace, then the user (group) ownership of the files under _/_p_r_o_c_/_[_p_i_d_] is instead made the same as  the  root  user
              (group) ID of the namespace.  This means that inside a container, things work as expected for the container "root" user.

              The process's "dumpable" attribute may change for the following reasons:

              *  The attribute was explicitly set via the pprrccttll(2) PPRR__SSEETT__DDUUMMPPAABBLLEE operation.

              *  The attribute was reset to the value in the file _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_i_d___d_u_m_p_a_b_l_e (described below), for the reasons described in pprrccttll(2).

              Resetting the "dumpable" attribute to 1 reverts the ownership of the _/_p_r_o_c_/_[_p_i_d_]_/_* files to the process's effective UID and GID.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r
              The files in this directory provide an API for security modules.  The contents of this directory are files that can be read and written in order to set security-related attributes.  This
              directory was added to support SELinux, but the intention was that the API be general enough to support other security modules.  For the purpose of explanation, examples of  how  SELinux
              uses these files are provided below.

              This directory is present only if the kernel was configured with CCOONNFFIIGG__SSEECCUURRIITTYY.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_c_u_r_r_e_n_t (since Linux 2.6.0)
              The contents of this file represent the current security attributes of the process.

              In SELinux, this file is used to get the security context of a process.  Prior to Linux 2.6.11, this file could not be used to set the security context (a write was always denied), since
              SELinux limited process security transitions to eexxeeccvvee(2) (see the description of _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_e_x_e_c, below).  Since Linux 2.6.11, SELinux lifted this restriction and began supporting
              "set" operations via writes to this node if authorized by policy, although use of this operation is only suitable for applications that are trusted to maintain any desired separation be‐
              tween the old and new security contexts.

              Prior to Linux 2.6.28, SELinux did not allow threads within a multi-threaded process to set their security context via this node as it would yield an  inconsistency  among  the  security
              contexts  of  the  threads  sharing  the  same memory space.  Since Linux 2.6.28, SELinux lifted this restriction and began supporting "set" operations for threads within a multithreaded
              process if the new security context is bounded by the old security context, where the bounded relation is defined in policy and guarantees that the new security context has a  subset  of
              the permissions of the old security context.

              Other security modules may choose to support "set" operations via writes to this node.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_e_x_e_c (since Linux 2.6.0)
              This file represents the attributes to assign to the process upon a subsequent eexxeeccvvee(2).

              In  SELinux,  this is needed to support role/domain transitions, and eexxeeccvvee(2) is the preferred point to make such transitions because it offers better control over the initialization of
              the process in the new security label and the inheritance of state.  In SELinux, this attribute is reset on eexxeeccvvee(2) so that the new program reverts to the default behavior for any  eexx‐‐
              eeccvvee(2) calls that it may make.  In SELinux, a process can set only its own _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_e_x_e_c attribute.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_f_s_c_r_e_a_t_e (since Linux 2.6.0)
              This file represents the attributes to assign to files created by subsequent calls to ooppeenn(2), mmkkddiirr(2), ssyymmlliinnkk(2), and mmkknnoodd(2)

              SELinux employs this file to support creation of a file (using the aforementioned system calls) in a secure state, so that there is no risk of inappropriate access being obtained between
              the time of creation and the time that attributes are set.  In SELinux, this attribute is reset on eexxeeccvvee(2), so that the new program reverts to the default behavior for  any  file  cre‐
              ation  calls  it  may make, but the attribute will persist across multiple file creation calls within a program unless it is explicitly reset.  In SELinux, a process can set only its own
              _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_f_s_c_r_e_a_t_e attribute.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_k_e_y_c_r_e_a_t_e (since Linux 2.6.18)
              If a process writes a security context into this file, all subsequently created keys (aadddd__kkeeyy(2)) will be labeled with this context.  For further information, see the kernel source  file
              _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_e_c_u_r_i_t_y_/_k_e_y_s_/_c_o_r_e_._r_s_t (or file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_e_c_u_r_i_t_y_/_k_e_y_s_._t_x_t on Linux between 3.0 and 4.13, or _D_o_c_u_m_e_n_t_a_t_i_o_n_/_k_e_y_s_._t_x_t before Linux 3.0).

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_p_r_e_v (since Linux 2.6.0)
              This file contains the security context of the process before the last eexxeeccvvee(2); that is, the previous value of _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_c_u_r_r_e_n_t.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_t_t_r_/_s_o_c_k_e_t_c_r_e_a_t_e (since Linux 2.6.18)
              If a process writes a security context into this file, all subsequently created sockets will be labeled with this context.

       _/_p_r_o_c_/_[_p_i_d_]_/_a_u_t_o_g_r_o_u_p (since Linux 2.6.38)
              See sscchheedd(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_a_u_x_v (since 2.6.0)
              This  contains  the  contents of the ELF interpreter information passed to the process at exec time.  The format is one _u_n_s_i_g_n_e_d _l_o_n_g ID plus one _u_n_s_i_g_n_e_d _l_o_n_g value for each entry.  The
              last entry contains two zeros.  See also ggeettaauuxxvvaall(3).

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_c_g_r_o_u_p (since Linux 2.6.24)
              See ccggrroouuppss(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_c_l_e_a_r___r_e_f_s (since Linux 2.6.22)

              This is a write-only file, writable only by owner of the process.

              The following values may be written to the file:

              1 (since Linux 2.6.22)
                     Reset the PG_Referenced and ACCESSED/YOUNG bits for all the pages associated with the process.  (Before kernel 2.6.32, writing any nonzero value to this file had this effect.)

              2 (since Linux 2.6.32)
                     Reset the PG_Referenced and ACCESSED/YOUNG bits for all anonymous pages associated with the process.

              3 (since Linux 2.6.32)
                     Reset the PG_Referenced and ACCESSED/YOUNG bits for all file-mapped pages associated with the process.

              Clearing the PG_Referenced and ACCESSED/YOUNG bits provides a method to measure approximately how much memory a process is using.  One first  inspects  the  values  in  the  "Referenced"
              fields  for the VMAs shown in _/_p_r_o_c_/_[_p_i_d_]_/_s_m_a_p_s to get an idea of the memory footprint of the process.  One then clears the PG_Referenced and ACCESSED/YOUNG bits and, after some measured
              time interval, once again inspects the values in the "Referenced" fields to get an idea of the change in memory footprint of the process during the measured interval.  If one  is  inter‐
              ested only in inspecting the selected mapping types, then the value 2 or 3 can be used instead of 1.

              Further values can be written to affect different properties:

              4 (since Linux 3.11)
                     Clear the soft-dirty bit for all the pages associated with the process.  This is used (in conjunction with _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p) by the check-point restore system to discover which
                     pages of a process have been dirtied since the file _/_p_r_o_c_/_[_p_i_d_]_/_c_l_e_a_r___r_e_f_s was written to.

              5 (since Linux 4.0)
                     Reset the peak resident set size ("high water mark") to the process's current resident set size value.

              Writing any value to _/_p_r_o_c_/_[_p_i_d_]_/_c_l_e_a_r___r_e_f_s other than those listed above has no effect.

              The _/_p_r_o_c_/_[_p_i_d_]_/_c_l_e_a_r___r_e_f_s file is present only if the CCOONNFFIIGG__PPRROOCC__PPAAGGEE__MMOONNIITTOORR kernel configuration option is enabled.

       _/_p_r_o_c_/_[_p_i_d_]_/_c_m_d_l_i_n_e
              This read-only file holds the complete command line for the process, unless the process is a zombie.  In the latter case, there is nothing in this file: that is, a read on this file will
              return 0 characters.  The command-line arguments appear in this file as a set of strings separated by null bytes ('\0'), with a further null byte after the last string.

       _/_p_r_o_c_/_[_p_i_d_]_/_c_o_m_m (since Linux 2.6.33)
              This  file  exposes  the process's _c_o_m_m value—that is, the command name associated with the process.  Different threads in the same process may have different _c_o_m_m values, accessible via
              _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_]_/_c_o_m_m.  A thread may modify its _c_o_m_m value, or that of any of other thread in the same thread group (see the discussion of CCLLOONNEE__TTHHRREEAADD in cclloonnee(2)), by writing  to
              the file _/_p_r_o_c_/_s_e_l_f_/_t_a_s_k_/_[_t_i_d_]_/_c_o_m_m.  Strings longer than TTAASSKK__CCOOMMMM__LLEENN (16) characters are silently truncated.

              This file provides a superset of the pprrccttll(2) PPRR__SSEETT__NNAAMMEE and PPRR__GGEETT__NNAAMMEE operations, and is employed by pptthhrreeaadd__sseettnnaammee__nnpp(3) when used to rename threads other than the caller.

       _/_p_r_o_c_/_[_p_i_d_]_/_c_o_r_e_d_u_m_p___f_i_l_t_e_r (since Linux 2.6.23)
              See ccoorree(5).

       _/_p_r_o_c_/_[_p_i_d_]_/_c_p_u_s_e_t (since Linux 2.6.12)
              See ccppuusseett(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_c_w_d
              This is a symbolic link to the current working directory of the process.  To find out the current working directory of process 20, for instance, you can do this:

                  $ ccdd //pprroocc//2200//ccwwdd;; //bbiinn//ppwwdd

              Note that the _p_w_d command is often a shell built-in, and might not work properly.  In bbaasshh(1), you may use _p_w_d _-_P.

              In a multithreaded process, the contents of this symbolic link are not available if the main thread has already terminated (typically by calling pptthhrreeaadd__eexxiitt(3)).

              Permission to dereference or read (rreeaaddlliinnkk(2)) this symbolic link is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_e_n_v_i_r_o_n
              This  file contains the initial environment that was set when the currently executing program was started via eexxeeccvvee(2).  The entries are separated by null bytes ('\0'), and there may be
              a null byte at the end.  Thus, to print out the environment of process 1, you would do:

                  $ ccaatt //pprroocc//11//eennvviirroonn || ttrr ''\\000000'' ''\\nn''

              If, after an eexxeeccvvee(2), the process modifies its environment (e.g., by calling functions such as ppuutteennvv(3) or modifying the eennvviirroonn(7) variable directly),  this  file  will  _n_o_t  reflect
              those changes.

              Furthermore, a process may change the memory location that this file refers via pprrccttll(2) operations such as PPRR__SSEETT__MMMM__EENNVV__SSTTAARRTT.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_e_x_e
              Under  Linux  2.2  and later, this file is a symbolic link containing the actual pathname of the executed command.  This symbolic link can be dereferenced normally; attempting to open it
              will open the executable.  You can even type _/_p_r_o_c_/_[_p_i_d_]_/_e_x_e to run another copy of the same executable that is being run by process [pid].  If the pathname has been unlinked,  the  sym‐
              bolic link will contain the string '(deleted)' appended to the original pathname.  In a multithreaded process, the contents of this symbolic link are not available if the main thread has
              already terminated (typically by calling pptthhrreeaadd__eexxiitt(3)).

              Permission to dereference or read (rreeaaddlliinnkk(2)) this symbolic link is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

              Under Linux 2.0 and earlier, _/_p_r_o_c_/_[_p_i_d_]_/_e_x_e is a pointer to the binary which was executed, and appears as a symbolic link.  A rreeaaddlliinnkk(2) call on this file under  Linux  2.0  returns  a
              string in the format:

                  [device]:inode

              For example, [0301]:1502 would be inode 1502 on device major 03 (IDE, MFM, etc. drives) minor 01 (first partition on the first drive).

              ffiinndd(1) with the _-_i_n_u_m option can be used to locate the file.

       _/_p_r_o_c_/_[_p_i_d_]_/_f_d_/
              This  is a subdirectory containing one entry for each file which the process has open, named by its file descriptor, and which is a symbolic link to the actual file.  Thus, 0 is standard
              input, 1 standard output, 2 standard error, and so on.

              For file descriptors for pipes and sockets, the entries will be symbolic links whose content is the file type with the inode.  A rreeaaddlliinnkk(2) call on this file returns  a  string  in  the
              format:

                  type:[inode]

              For example, _s_o_c_k_e_t_:_[_2_2_4_8_8_6_8_] will be a socket and its inode is 2248868.  For sockets, that inode can be used to find more information in one of the files under _/_p_r_o_c_/_n_e_t_/.

              For  file  descriptors  that  have  no  corresponding  inode  (e.g.,  file  descriptors produced by bbppff(2), eeppoollll__ccrreeaattee(2), eevveennttffdd(2), iinnoottiiffyy__iinniitt(2), ppeerrff__eevveenntt__ooppeenn(2), ssiiggnnaallffdd(2),
              ttiimmeerrffdd__ccrreeaattee(2), and uusseerrffaauullttffdd(2)), the entry will be a symbolic link with contents of the form

                  anon_inode:<file-type>

              In many cases (but not all), the _f_i_l_e_-_t_y_p_e is surrounded by square brackets.

              For example, an epoll file descriptor will have a symbolic link whose content is the string _a_n_o_n___i_n_o_d_e_:_[_e_v_e_n_t_p_o_l_l_].

              In a multithreaded process, the contents of this directory are not available if the main thread has already terminated (typically by calling pptthhrreeaadd__eexxiitt(3)).

              Programs that take a filename as a command-line argument, but don't take input from standard input if no argument is supplied, and programs that write to a file named as  a  command-line
              argument,  but  don't  send their output to standard output if no argument is supplied, can nevertheless be made to use standard input or standard output by using _/_p_r_o_c_/_[_p_i_d_]_/_f_d files as
              command-line arguments.  For example, assuming that _-_i is the flag designating an input file and _-_o is the flag designating an output file:

                  $ ffoooobbaarr --ii //pprroocc//sseellff//ffdd//00 --oo //pprroocc//sseellff//ffdd//11 ......

              and you have a working filter.

              _/_p_r_o_c_/_s_e_l_f_/_f_d_/_N is approximately the same as _/_d_e_v_/_f_d_/_N in some UNIX and UNIX-like systems.  Most Linux MAKEDEV scripts symbolically link _/_d_e_v_/_f_d to _/_p_r_o_c_/_s_e_l_f_/_f_d, in fact.

              Most systems provide symbolic links _/_d_e_v_/_s_t_d_i_n, _/_d_e_v_/_s_t_d_o_u_t, and _/_d_e_v_/_s_t_d_e_r_r, which respectively link to the files _0, _1, and _2 in _/_p_r_o_c_/_s_e_l_f_/_f_d.  Thus the example command above could  be
              written as:

                  $ ffoooobbaarr --ii //ddeevv//ssttddiinn --oo //ddeevv//ssttddoouutt ......

              Permission to dereference or read (rreeaaddlliinnkk(2)) the symbolic links in this directory is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

              Note  that  for  file  descriptors  referring  to  inodes  (pipes  and  sockets,  see above), those inodes still have permission bits and ownership information distinct from those of the
              _/_p_r_o_c_/_[_p_i_d_]_/_f_d entry, and that the owner may differ from the user and group IDs of the process.  An unprivileged process may lack permissions to open them, as in this example:

                  $ eecchhoo tteesstt || ssuuddoo --uu nnoobbooddyy ccaatt
                  test
                  $ eecchhoo tteesstt || ssuuddoo --uu nnoobbooddyy ccaatt //pprroocc//sseellff//ffdd//00
                  cat: /proc/self/fd/0: Permission denied

              File descriptor 0 refers to the pipe created by the shell and owned by that shell's user, which is not _n_o_b_o_d_y, so ccaatt does not have permission to create a new  file  descriptor  to  read
              from that inode, even though it can still read from its existing file descriptor 0.

       _/_p_r_o_c_/_[_p_i_d_]_/_f_d_i_n_f_o_/ (since Linux 2.6.22)
              This  is  a  subdirectory  containing one entry for each file which the process has open, named by its file descriptor.  The files in this directory are readable only by the owner of the
              process.  The contents of each file can be read to obtain information about the corresponding file descriptor.  The content depends on the type of file referred to by  the  corresponding
              file descriptor.

              For regular files and directories, we see something like:

                  $ ccaatt //pprroocc//1122001155//ffddiinnffoo//44
                  pos:    1000
                  flags:  01002002
                  mnt_id: 21

              The fields are as follows:

              _p_o_s    This is a decimal number showing the file offset.

              _f_l_a_g_s  This is an octal number that displays the file access mode and file status flags (see ooppeenn(2)).  If the close-on-exec file descriptor flag is set, then _f_l_a_g_s will also include the
                     value OO__CCLLOOEEXXEECC.

                     Before Linux 3.1, this field incorrectly displayed the setting of OO__CCLLOOEEXXEECC at the time the file was opened, rather than the current setting of the close-on-exec flag.

              _m_n_t___i_d This field, present since Linux 3.15, is the ID of the mount point containing this file.  See the description of _/_p_r_o_c_/_[_p_i_d_]_/_m_o_u_n_t_i_n_f_o.

              For eventfd file descriptors (see eevveennttffdd(2)), we see (since Linux 3.8) the following fields:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  eventfd-count:               40

              _e_v_e_n_t_f_d_-_c_o_u_n_t is the current value of the eventfd counter, in hexadecimal.

              For epoll file descriptors (see eeppoollll(7)), we see (since Linux 3.8) the following fields:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  tfd:        9 events:       19 data: 74253d2500000009
                  tfd:        7 events:       19 data: 74253d2500000007

              Each of the lines beginning _t_f_d describes one of the file descriptors being monitored via the epoll file descriptor (see eeppoollll__ccttll(2) for some details).  The _t_f_d field is the  number  of
              the  file descriptor.  The _e_v_e_n_t_s field is a hexadecimal mask of the events being monitored for this file descriptor.  The _d_a_t_a field is the data value associated with this file descrip‐
              tor.

              For signalfd file descriptors (see ssiiggnnaallffdd(2)), we see (since Linux 3.8) the following fields:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  sigmask:  0000000000000006

              _s_i_g_m_a_s_k is the hexadecimal mask of signals that are accepted via this signalfd file descriptor.  (In this example, bits 2 and 3 are set, corresponding to the signals SSIIGGIINNTT and  SSIIGGQQUUIITT;
              see ssiiggnnaall(7).)

              For inotify file descriptors (see iinnoottiiffyy(7)), we see (since Linux 3.8) the following fields:

                  pos: 0
                  flags:    00
                  mnt_id:   11
                  inotify wd:2 ino:7ef82a sdev:800001 mask:800afff ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:2af87e00220ffd73
                  inotify wd:1 ino:192627 sdev:800001 mask:800afff ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:27261900802dfd73

              Each of the lines beginning with "inotify" displays information about one file or directory that is being monitored.  The fields in this line are as follows:

              _w_d     A watch descriptor number (in decimal).

              _i_n_o    The inode number of the target file (in hexadecimal).

              _s_d_e_v   The ID of the device where the target file resides (in hexadecimal).

              _m_a_s_k   The mask of events being monitored for the target file (in hexadecimal).

              If the kernel was built with exportfs support, the path to the target file is exposed as a file handle, via three hexadecimal fields: _f_h_a_n_d_l_e_-_b_y_t_e_s, _f_h_a_n_d_l_e_-_t_y_p_e, and _f___h_a_n_d_l_e.

              For fanotify file descriptors (see ffaannoottiiffyy(7)), we see (since Linux 3.8) the following fields:

                  pos: 0
                  flags:    02
                  mnt_id:   11
                  fanotify flags:0 event-flags:88002
                  fanotify ino:19264f sdev:800001 mflags:0 mask:1 ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:4f261900a82dfd73

              The fourth line displays information defined when the fanotify group was created via ffaannoottiiffyy__iinniitt(2):

              _f_l_a_g_s  The _f_l_a_g_s argument given to ffaannoottiiffyy__iinniitt(2) (expressed in hexadecimal).

              _e_v_e_n_t_-_f_l_a_g_s
                     The _e_v_e_n_t___f___f_l_a_g_s argument given to ffaannoottiiffyy__iinniitt(2) (expressed in hexadecimal).

              Each additional line shown in the file contains information about one of the marks in the fanotify group.  Most of these fields are as for inotify, except:

              _m_f_l_a_g_s The flags associated with the mark (expressed in hexadecimal).

              _m_a_s_k   The events mask for this mark (expressed in hexadecimal).

              _i_g_n_o_r_e_d___m_a_s_k
                     The mask of events that are ignored for this mark (expressed in hexadecimal).

              For details on these fields, see ffaannoottiiffyy__mmaarrkk(2).

              For timerfd file descriptors (see ttiimmeerrffdd(2)), we see (since Linux 3.17) the following fields:

                  pos:    0
                  flags:  02004002
                  mnt_id: 13
                  clockid: 0
                  ticks: 0
                  settime flags: 03
                  it_value: (7695568592, 640020877)
                  it_interval: (0, 0)

              _c_l_o_c_k_i_d
                     This  is  the numeric value of the clock ID (corresponding to one of the CCLLOOCCKK__** constants defined via _<_t_i_m_e_._h_>) that is used to mark the progress of the timer (in this example, 0
                     is CCLLOOCCKK__RREEAALLTTIIMMEE).

              _t_i_c_k_s  This is the number of timer expirations that have occurred, (i.e., the value that rreeaadd(2) on it would return).

              _s_e_t_t_i_m_e _f_l_a_g_s
                     This field lists the flags with which the timerfd was last armed (see ttiimmeerrffdd__sseettttiimmee(2)), in octal (in this example, both TTFFDD__TTIIMMEERR__AABBSSTTIIMMEE and TTFFDD__TTIIMMEERR__CCAANNCCEELL__OONN__SSEETT are set).

              _i_t___v_a_l_u_e
                     This field contains the amount of time until the timer will next expire, expressed in seconds and nanoseconds.  This is always expressed as a relative value, regardless of whether
                     the timer was created using the TTFFDD__TTIIMMEERR__AABBSSTTIIMMEE flag.

              _i_t___i_n_t_e_r_v_a_l
                     This field contains the interval of the timer, in seconds and nanoseconds.  (The _i_t___v_a_l_u_e and _i_t___i_n_t_e_r_v_a_l fields contain the values that ttiimmeerrffdd__ggeettttiimmee(2) on this file descriptor
                     would return.)

       _/_p_r_o_c_/_[_p_i_d_]_/_g_i_d___m_a_p (since Linux 3.5)
              See uusseerr__nnaammeessppaacceess(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_i_o (since kernel 2.6.20)
              This file contains I/O statistics for the process, for example:

                  # ccaatt //pprroocc//33882288//iioo
                  rchar: 323934931
                  wchar: 323929600
                  syscr: 632687
                  syscw: 632675
                  read_bytes: 0
                  write_bytes: 323932160
                  cancelled_write_bytes: 0

              The fields are as follows:

              _r_c_h_a_r: characters read
                     The number of bytes which this task has caused to be read from storage.  This is simply the sum of bytes which this process passed to rreeaadd(2) and similar  system  calls.   It  in‐
                     cludes things such as terminal I/O and is unaffected by whether or not actual physical disk I/O was required (the read might have been satisfied from pagecache).

              _w_c_h_a_r: characters written
                     The number of bytes which this task has caused, or shall cause to be written to disk.  Similar caveats apply here as with _r_c_h_a_r.

              _s_y_s_c_r: read syscalls
                     Attempt to count the number of read I/O operations—that is, system calls such as rreeaadd(2) and pprreeaadd(2).

              _s_y_s_c_w: write syscalls
                     Attempt to count the number of write I/O operations—that is, system calls such as wwrriittee(2) and ppwwrriittee(2).

              _r_e_a_d___b_y_t_e_s: bytes read
                     Attempt to count the number of bytes which this process really did cause to be fetched from the storage layer.  This is accurate for block-backed filesystems.

              _w_r_i_t_e___b_y_t_e_s: bytes written
                     Attempt to count the number of bytes which this process caused to be sent to the storage layer.

              _c_a_n_c_e_l_l_e_d___w_r_i_t_e___b_y_t_e_s:
                     The  big inaccuracy here is truncate.  If a process writes 1MB to a file and then deletes the file, it will in fact perform no writeout.  But it will have been accounted as having
                     caused 1MB of write.  In other words: this field represents the number of bytes which this process caused to not happen, by truncating pagecache.  A task can cause "negative"  I/O
                     too.  If this task truncates some dirty pagecache, some I/O which another task has been accounted for (in its _w_r_i_t_e___b_y_t_e_s) will not be happening.

              _N_o_t_e:  In  the  current  implementation,  things are a bit racy on 32-bit systems: if process A reads process B's _/_p_r_o_c_/_[_p_i_d_]_/_i_o while process B is updating one of these 64-bit counters,
              process A could see an intermediate result.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_l_i_m_i_t_s (since Linux 2.6.24)
              This file displays the soft limit, hard limit, and units of measurement for each of the process's resource limits (see ggeettrrlliimmiitt(2)).  Up to and including Linux 2.6.35, this file is pro‐
              tected to allow reading only by the real UID of the process.  Since Linux 2.6.36, this file is readable by all users on the system.

       _/_p_r_o_c_/_[_p_i_d_]_/_m_a_p___f_i_l_e_s_/ (since kernel 3.3)
              This  subdirectory contains entries corresponding to memory-mapped files (see mmmmaapp(2)).  Entries are named by memory region start and end address pair (expressed as hexadecimal numbers),
              and are symbolic links to the mapped files themselves.  Here is an example, with the output wrapped and reformatted to fit on an 80-column display:

                  # llss --ll //pprroocc//sseellff//mmaapp__ffiilleess//
                  lr--------. 1 root root 64 Apr 16 21:31
                              3252e00000-3252e20000 -> /usr/lib64/ld-2.15.so
                  ...

              Although these entries are present for memory regions that were mapped with the MMAAPP__FFIILLEE flag, the way anonymous shared memory (regions created with the MMAAPP__AANNOONN || MMAAPP__SSHHAARREEDD  flags)  is
              implemented in Linux means that such regions also appear on this directory.  Here is an example where the target file is the deleted _/_d_e_v_/_z_e_r_o one:

                  lrw-------. 1 root root 64 Apr 16 21:33
                              7fc075d2f000-7fc075e6f000 -> /dev/zero (deleted)

              This directory appears only if the CCOONNFFIIGG__CCHHEECCKKPPOOIINNTT__RREESSTTOORREE kernel configuration option is enabled.  Privilege (CCAAPP__SSYYSS__AADDMMIINN) is required to view the contents of this directory.

       _/_p_r_o_c_/_[_p_i_d_]_/_m_a_p_s
              A file containing the currently mapped memory regions and their access permissions.  See mmmmaapp(2) for some further information about memory mappings.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

              The format of the file is:

    _a_d_d_r_e_s_s           _p_e_r_m_s _o_f_f_s_e_t  _d_e_v   _i_n_o_d_e       _p_a_t_h_n_a_m_e
    00400000-00452000 r-xp 00000000 08:02 173521      /usr/bin/dbus-daemon
    00651000-00652000 r--p 00051000 08:02 173521      /usr/bin/dbus-daemon
    00652000-00655000 rw-p 00052000 08:02 173521      /usr/bin/dbus-daemon
    00e03000-00e24000 rw-p 00000000 00:00 0           [heap]
    00e24000-011f7000 rw-p 00000000 00:00 0           [heap]
    ...
    35b1800000-35b1820000 r-xp 00000000 08:02 135522  /usr/lib64/ld-2.15.so
    35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522  /usr/lib64/ld-2.15.so
    35b1a20000-35b1a21000 rw-p 00020000 08:02 135522  /usr/lib64/ld-2.15.so
    35b1a21000-35b1a22000 rw-p 00000000 00:00 0
    35b1c00000-35b1dac000 r-xp 00000000 08:02 135870  /usr/lib64/libc-2.15.so
    35b1dac000-35b1fac000 ---p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so
    35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so
    35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870  /usr/lib64/libc-2.15.so
    ...
    f2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0    [stack:986]
    ...
    7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0   [stack]
    7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0   [vdso]

              The _a_d_d_r_e_s_s field is the address space in the process that the mapping occupies.  The _p_e_r_m_s field is a set of permissions:

                  r = read
                  w = write
                  x = execute
                  s = shared
                  p = private (copy on write)

              The  _o_f_f_s_e_t  field  is the offset into the file/whatever; _d_e_v is the device (major:minor); _i_n_o_d_e is the inode on that device.  0 indicates that no inode is associated with the memory re‐
              gion, as would be the case with BSS (uninitialized data).

              The _p_a_t_h_n_a_m_e field will usually be the file that is backing the mapping.  For ELF files, you can easily coordinate with the _o_f_f_s_e_t field by looking at the Offset field in the ELF program
              headers (_r_e_a_d_e_l_f _-_l).

              There are additional helpful pseudo-paths:

                   _[_s_t_a_c_k_]
                          The initial process's (also known as the main thread's) stack.

                   _[_s_t_a_c_k_:_<_t_i_d_>_] (from Linux 3.4 to 4.4)
                          A thread's stack (where the _<_t_i_d_> is a thread ID).  It corresponds to the _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_]_/ path.  This field was removed in Linux 4.5, since providing this information
                          for a process with large numbers of threads is expensive.

                   _[_v_d_s_o_] The virtual dynamically linked shared object.  See vvddssoo(7).

                   _[_h_e_a_p_] The process's heap.

              If the _p_a_t_h_n_a_m_e field is blank, this is an anonymous mapping as obtained via mmmmaapp(2).  There is no easy way to coordinate this back to a process's source, short  of  running  it  through
              ggddbb(1), ssttrraaccee(1), or similar.

              _p_a_t_h_n_a_m_e  is  shown unescaped except for newline characters, which are replaced with an octal escape sequence.  As a result, it is not possible to determine whether the original pathname
              contained a newline character or the literal _\_e_0_1_2 character sequence.

              If the mapping is file-backed and the file has been deleted, the string " (deleted)" is appended to the pathname.  Note that this is ambiguous too.

              Under Linux 2.0, there is no field giving pathname.

       _/_p_r_o_c_/_[_p_i_d_]_/_m_e_m
              This file can be used to access the pages of a process's memory through ooppeenn(2), rreeaadd(2), and llsseeeekk(2).

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__AATTTTAACCHH__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_m_o_u_n_t_i_n_f_o (since Linux 2.6.26)
              This file contains information about mount points in the process's mount namespace (see mmoouunntt__nnaammeessppaacceess(7)).  It supplies various information (e.g., propagation state, root of mount for
              bind  mounts, identifier for each mount and its parent) that is missing from the (older) _/_p_r_o_c_/_[_p_i_d_]_/_m_o_u_n_t_s file, and fixes various other problems with that file (e.g., nonextensibility,
              failure to distinguish per-mount versus per-superblock options).

              The file contains lines of the form:

36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue
(1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)

              The numbers in parentheses are labels for the descriptions below:

              (1)  mount ID: a unique ID for the mount (may be reused after uummoouunntt(2)).

              (2)  parent ID: the ID of the parent mount (or of self for the root of this mount namespace's mount tree).

                   If a new mount is stacked on top of a previous existing mount (so that it hides the existing mount) at pathname P, then the parent of the new mount is the previous mount at that lo‐
                   cation.  Thus, when looking at all the mounts stacked at a particular location, the top-most mount is the one that is not the parent of any other mount at the same location.  (Note,
                   however, that this top-most mount will be accessible only if the longest path subprefix of P that is a mount point is not itself hidden by a stacked mount.)

                   If the parent mount point lies outside the process's root directory (see cchhrroooott(2)), the ID shown here won't have a corresponding record  in  _m_o_u_n_t_i_n_f_o  whose  mount  ID  (field  1)
                   matches  this  parent  mount ID (because mount points that lie outside the process's root directory are not shown in _m_o_u_n_t_i_n_f_o).  As a special case of this point, the process's root
                   mount point may have a parent mount (for the initramfs filesystem) that lies outside the process's root directory, and an entry for that mount point will not appear in _m_o_u_n_t_i_n_f_o.

              (3)  major:minor: the value of _s_t___d_e_v for files on this filesystem (see ssttaatt(2)).

              (4)  root: the pathname of the directory in the filesystem which forms the root of this mount.

              (5)  mount point: the pathname of the mount point relative to the process's root directory.

              (6)  mount options: per-mount options (see mmoouunntt(2)).

              (7)  optional fields: zero or more fields of the form "tag[:value]"; see below.

              (8)  separator: the end of the optional fields is marked by a single hyphen.

              (9)  filesystem type: the filesystem type in the form "type[.subtype]".

              (10) mount source: filesystem-specific information or "none".

              (11) super options: per-superblock options (see mmoouunntt(2)).

              Currently, the possible optional fields are _s_h_a_r_e_d, _m_a_s_t_e_r, _p_r_o_p_a_g_a_t_e___f_r_o_m, and _u_n_b_i_n_d_a_b_l_e.  See mmoouunntt__nnaammeessppaacceess(7) for a description of these fields.  Parsers should ignore all  unrec‐
              ognized optional fields.

              For more information on mount propagation see: _D_o_c_u_m_e_n_t_a_t_i_o_n_/_f_i_l_e_s_y_s_t_e_m_s_/_s_h_a_r_e_d_s_u_b_t_r_e_e_._t_x_t in the Linux kernel source tree.

       _/_p_r_o_c_/_[_p_i_d_]_/_m_o_u_n_t_s (since Linux 2.4.19)
              This file lists all the filesystems currently mounted in the process's mount namespace (see mmoouunntt__nnaammeessppaacceess(7)).  The format of this file is documented in ffssttaabb(5).

              Since  kernel version 2.6.15, this file is pollable: after opening the file for reading, a change in this file (i.e., a filesystem mount or unmount) causes sseelleecctt(2) to mark the file de‐
              scriptor as having an exceptional condition, and ppoollll(2) and eeppoollll__wwaaiitt(2) mark the file as having a priority event (PPOOLLLLPPRRII).  (Before Linux 2.6.30, a change in this file was  indicated
              by the file descriptor being marked as readable for sseelleecctt(2), and being marked as having an error condition for ppoollll(2) and eeppoollll__wwaaiitt(2).)

       _/_p_r_o_c_/_[_p_i_d_]_/_m_o_u_n_t_s_t_a_t_s (since Linux 2.6.17)
              This  file  exports  information  (statistics,  configuration information) about the mount points in the process's mount namespace (see mmoouunntt__nnaammeessppaacceess(7)).  Lines in this file have the
              form:

                  device /dev/sda7 mounted on /home with fstype ext3 [statistics]
                  (       1      )            ( 2 )             (3 ) (4)

              The fields in each line are:

              (1)  The name of the mounted device (or "nodevice" if there is no corresponding device).

              (2)  The mount point within the filesystem tree.

              (3)  The filesystem type.

              (4)  Optional statistics and configuration information.  Currently (as at Linux 2.6.26), only NFS filesystems export information via this field.

              This file is readable only by the owner of the process.

       _/_p_r_o_c_/_[_p_i_d_]_/_n_e_t (since Linux 2.6.25)
              See the description of _/_p_r_o_c_/_n_e_t.

       _/_p_r_o_c_/_[_p_i_d_]_/_n_s_/ (since Linux 3.0)
              This is a subdirectory containing one entry for each namespace that supports being manipulated by sseettnnss(2).  For more information, see nnaammeessppaacceess(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_n_u_m_a___m_a_p_s (since Linux 2.6.14)
              See nnuummaa(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___a_d_j (since Linux 2.6.11)
              This file can be used to adjust the score used to select which process should be killed in an out-of-memory (OOM) situation.  The kernel uses this value for a bit-shift operation of  the
              process's  _o_o_m___s_c_o_r_e  value: valid values are in the range -16 to +15, plus the special value -17, which disables OOM-killing altogether for this process.  A positive score increases the
              likelihood of this process being killed by the OOM-killer; a negative score decreases the likelihood.

              The default value for this file is 0; a new process inherits its parent's _o_o_m___a_d_j setting.  A process must be privileged (CCAAPP__SSYYSS__RREESSOOUURRCCEE) to update this file.

              Since Linux 2.6.36, use of this file is deprecated in favor of _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___s_c_o_r_e___a_d_j.

       _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___s_c_o_r_e (since Linux 2.6.11)
              This file displays the current score that the kernel gives to this process for the purpose of selecting a process for the OOM-killer.  A higher score  means  that  the  process  is  more
              likely to be selected by the OOM-killer.  The basis for this score is the amount of memory used by the process, with increases (+) or decreases (-) for factors including:

              * whether the process is privileged (-).

              Before kernel 2.6.36 the following factors were also used in the calculation of oom_score:

              * whether the process creates a lot of children using ffoorrkk(2) (+);

              * whether the process has been running a long time, or has used a lot of CPU time (-);

              * whether the process has a low nice value (i.e., > 0) (+); and

              * whether the process is making direct hardware access (-).

              The _o_o_m___s_c_o_r_e also reflects the adjustment specified by the _o_o_m___s_c_o_r_e___a_d_j or _o_o_m___a_d_j setting for the process.

       _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___s_c_o_r_e___a_d_j (since Linux 2.6.36)
              This file can be used to adjust the badness heuristic used to select which process gets killed in out-of-memory conditions.

              The badness heuristic assigns a value to each candidate task ranging from 0 (never kill) to 1000 (always kill) to determine which process is targeted.  The units are roughly a proportion
              along that range of allowed memory the process may allocate from, based on an estimation of its current memory and swap use.  For example, if a task is using all allowed memory, its bad‐
              ness score will be 1000.  If it is using half of its allowed memory, its score will be 500.

              There is an additional factor included in the badness score: root processes are given 3% extra memory over other tasks.

              The  amount  of  "allowed" memory depends on the context in which the OOM-killer was called.  If it is due to the memory assigned to the allocating task's cpuset being exhausted, the al‐
              lowed memory represents the set of mems assigned to that cpuset (see ccppuusseett(7)).  If it is due to a mempolicy's node(s) being exhausted, the allowed memory represents the set of  mempol‐
              icy  nodes.   If  it is due to a memory limit (or swap limit) being reached, the allowed memory is that configured limit.  Finally, if it is due to the entire system being out of memory,
              the allowed memory represents all allocatable resources.

              The value of _o_o_m___s_c_o_r_e___a_d_j is added to the badness score before it is used  to  determine  which  task  to  kill.   Acceptable  values  range  from  -1000  (OOM_SCORE_ADJ_MIN)  to  +1000
              (OOM_SCORE_ADJ_MAX).   This  allows  user space to control the preference for OOM-killing, ranging from always preferring a certain task or completely disabling it from OOM killing.  The
              lowest possible value, -1000, is equivalent to disabling OOM-killing entirely for that task, since it will always report a badness score of 0.

              Consequently, it is very simple for user space to define the amount of memory to consider for each task.  Setting an _o_o_m___s_c_o_r_e___a_d_j value of +500, for example, is  roughly  equivalent  to
              allowing  the remainder of tasks sharing the same system, cpuset, mempolicy, or memory controller resources to use at least 50% more memory.  A value of -500, on the other hand, would be
              roughly equivalent to discounting 50% of the task's allowed memory from being considered as scoring against the task.

              For backward compatibility with previous kernels, _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___a_d_j can still be used to tune the badness score.  Its value is scaled linearly with _o_o_m___s_c_o_r_e___a_d_j.

              Writing to _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___s_c_o_r_e___a_d_j or _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___a_d_j will change the other with its scaled value.

              The cchhoooomm(1) program provides a command-line interface for adjusting the _o_o_m___s_c_o_r_e___a_d_j value of a running process or a newly executed command.

       _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p (since Linux 2.6.25)
              This file shows the mapping of each of the process's virtual pages into physical page frames or swap area.  It contains one 64-bit value for each virtual page, with the bits set as  fol‐
              lows:

                   63     If set, the page is present in RAM.

                   62     If set, the page is in swap space

                   61 (since Linux 3.5)
                          The page is a file-mapped page or a shared anonymous page.

                   60–57 (since Linux 3.11)
                          Zero

                   56 (since Linux 4.2)
                          The page is exclusively mapped.

                   55 (since Linux 3.11)
                          PTE is soft-dirty (see the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_s_o_f_t_-_d_i_r_t_y_._r_s_t).

                   54–0   If  the  page  is  present  in  RAM (bit 63), then these bits provide the page frame number, which can be used to index _/_p_r_o_c_/_k_p_a_g_e_f_l_a_g_s and _/_p_r_o_c_/_k_p_a_g_e_c_o_u_n_t.  If the page is
                          present in swap (bit 62), then bits 4–0 give the swap type, and bits 54–5 encode the swap offset.

              Before Linux 3.11, bits 60–55 were used to encode the base-2 log of the page size.

              To employ _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p efficiently, use _/_p_r_o_c_/_[_p_i_d_]_/_m_a_p_s to determine which areas of memory are actually mapped and seek to skip over unmapped regions.

              The _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p file is present only if the CCOONNFFIIGG__PPRROOCC__PPAAGGEE__MMOONNIITTOORR kernel configuration option is enabled.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_p_e_r_s_o_n_a_l_i_t_y (since Linux 2.6.28)
              This read-only file exposes the process's execution domain, as set by ppeerrssoonnaalliittyy(2).  The value is displayed in hexadecimal notation.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__AATTTTAACCHH__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_r_o_o_t
              UNIX and Linux support the idea of a per-process root of the filesystem, set by the cchhrroooott(2) system call.  This file is a symbolic link that points to the process's root directory,  and
              behaves in the same way as _e_x_e, and _f_d_/_*.

              Note  however  that  this file is not merely a symbolic link.  It provides the same view of the filesystem (including namespaces and the set of per-process mounts) as the process itself.
              An example illustrates this point.  In one terminal, we start a shell in new user and mount namespaces, and in that shell we create some new mount points:

                  $ PPSS11==''sshh11## '' uunnsshhaarree --UUrrnnmm
                  sh1# mmoouunntt --tt ttmmppffss ttmmppffss //eettcc  # Mount empty tmpfs at /etc
                  sh1# mmoouunntt ----bbiinndd //uussrr //ddeevv     # Mount /usr at /dev
                  sh1# eecchhoo $$$$
                  27123

              In a second terminal window, in the initial mount namespace, we look at the contents of the corresponding mounts in the initial and new namespaces:

                  $ PPSS11==''sshh22## '' ssuuddoo sshh
                  sh2# llss //eettcc || wwcc --ll                  # In initial NS
                  309
                  sh2# llss //pprroocc//2277112233//rroooott//eettcc || wwcc --ll  # /etc in other NS
                  0                                     # The empty tmpfs dir
                  sh2# llss //ddeevv || wwcc --ll                  # In initial NS
                  205
                  sh2# llss //pprroocc//2277112233//rroooott//ddeevv || wwcc --ll  # /dev in other NS
                  11                                    # Actually bind
                                                        # mounted to /usr
                  sh2# llss //uussrr || wwcc --ll                  # /usr in initial NS
                  11

              In a multithreaded process, the contents of the _/_p_r_o_c_/_[_p_i_d_]_/_r_o_o_t symbolic link are not available if the main thread has already terminated (typically by calling pptthhrreeaadd__eexxiitt(3)).

              Permission to dereference or read (rreeaaddlliinnkk(2)) this symbolic link is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_e_c_c_o_m_p (Linux 2.6.12 to 2.6.22)
              This file can be used to read and change the process's secure computing (seccomp) mode setting.  It contains the value 0 if the process is not in seccomp mode, and 1 if the process is in
              strict seccomp mode (see sseeccccoommpp(2)).  Writing 1 to this file places the process irreversibly in strict seccomp mode.  (Further attempts to write to the file fail with the EEPPEERRMM error.)

              In Linux 2.6.23, this file went away, to be replaced by the pprrccttll(2) PPRR__GGEETT__SSEECCCCOOMMPP and PPRR__SSEETT__SSEECCCCOOMMPP operations (and later by sseeccccoommpp(2) and the _S_e_c_c_o_m_p field in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_e_t_g_r_o_u_p_s (since Linux 3.19)
              See uusseerr__nnaammeessppaacceess(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_m_a_p_s (since Linux 2.6.14)
              This  file  shows  memory consumption for each of the process's mappings.  (The ppmmaapp(1) command displays similar information, in a form that may be easier for parsing.)  For each mapping
              there is a series of lines such as the following:

                  00400000-0048a000 r-xp 00000000 fd:03 960637       /bin/bash
                  Size:                552 kB
                  Rss:                 460 kB
                  Pss:                 100 kB
                  Shared_Clean:        452 kB
                  Shared_Dirty:          0 kB
                  Private_Clean:         8 kB
                  Private_Dirty:         0 kB
                  Referenced:          460 kB
                  Anonymous:             0 kB
                  AnonHugePages:         0 kB
                  ShmemHugePages:        0 kB
                  ShmemPmdMapped:        0 kB
                  Swap:                  0 kB
                  KernelPageSize:        4 kB
                  MMUPageSize:           4 kB
                  KernelPageSize:        4 kB
                  MMUPageSize:           4 kB
                  Locked:                0 kB
                  ProtectionKey:         0
                  VmFlags: rd ex mr mw me dw

              The first of these lines shows the same information as is displayed for the mapping in _/_p_r_o_c_/_[_p_i_d_]_/_m_a_p_s.  The following lines show the size of the mapping, the amount of the mapping that
              is  currently  resident  in  RAM ("Rss"), the process's proportional share of this mapping ("Pss"), the number of clean and dirty shared pages in the mapping, and the number of clean and
              dirty private pages in the mapping.  "Referenced" indicates the amount of memory currently marked as referenced or accessed.  "Anonymous" shows the amount of memory that does not  belong
              to any file.  "Swap" shows how much would-be-anonymous memory is also used, but out on swap.

              The  "KernelPageSize"  line  (available since Linux 2.6.29) is the page size used by the kernel to back the virtual memory area.  This matches the size used by the MMU in the majority of
              cases.  However, one counter-example occurs on PPC64 kernels whereby a kernel using 64kB as a base page size may still use 4kB pages for the MMU on older processors.  To distinguish  the
              two attributes, the "MMUPageSize" line (also available since Linux 2.6.29) reports the page size used by the MMU.

              The "Locked" indicates whether the mapping is locked in memory or not.

              The  "ProtectionKey"  line (available since Linux 4.9, on x86 only) contains the memory protection key (see ppkkeeyyss(7)) associated with the virtual memory area.  This entry is present only
              if the kernel was built with the CCOONNFFIIGG__XX8866__IINNTTEELL__MMEEMMOORRYY__PPRROOTTEECCTTIIOONN__KKEEYYSS configuration option.

              The "VmFlags" line (available since Linux 3.8) represents the kernel flags associated with the virtual memory area, encoded using the following two-letter codes:

                  rd  - readable
                  wr  - writable
                  ex  - executable
                  sh  - shared
                  mr  - may read
                  mw  - may write
                  me  - may execute
                  ms  - may share
                  gd  - stack segment grows down
                  pf  - pure PFN range
                  dw  - disabled write to the mapped file
                  lo  - pages are locked in memory
                  io  - memory mapped I/O area
                  sr  - sequential read advise provided
                  rr  - random read advise provided
                  dc  - do not copy area on fork
                  de  - do not expand area on remapping
                  ac  - area is accountable
                  nr  - swap space is not reserved for the area
                  ht  - area uses huge tlb pages
                  nl  - non-linear mapping
                  ar  - architecture specific flag
                  dd  - do not include area into core dump
                  sd  - soft-dirty flag
                  mm  - mixed map area
                  hg  - huge page advise flag
                  nh  - no-huge page advise flag
                  mg  - mergeable advise flag

              "ProtectionKey" field contains the memory protection key (see ppkkeeyyss(5)) associated with the virtual memory area.  Present only if the kernel  was  built  with  the  CCOONNFFIIGG__XX8866__IINNTTEELL__MMEEMM‐‐
              OORRYY__PPRROOTTEECCTTIIOONN__KKEEYYSS configuration option. (since Linux 4.6)

              The _/_p_r_o_c_/_[_p_i_d_]_/_s_m_a_p_s file is present only if the CCOONNFFIIGG__PPRROOCC__PPAAGGEE__MMOONNIITTOORR kernel configuration option is enabled.

       _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_c_k (since Linux 2.6.29)
              This file provides a symbolic trace of the function calls in this process's kernel stack.  This file is provided only if the kernel was built with the CCOONNFFIIGG__SSTTAACCKKTTRRAACCEE configuration op‐
              tion.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__AATTTTAACCHH__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t
              Status information about the process.  This is used by ppss(1).  It is defined in the kernel source file _f_s_/_p_r_o_c_/_a_r_r_a_y_._c.

              The fields, in order, with their proper ssccaannff(3) format specifiers, are listed below.  Whether or not certain of these fields display valid information is governed  by  a  ptrace  access
              mode  PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS | PPTTRRAACCEE__MMOODDEE__NNOOAAUUDDIITT  check  (refer to ppttrraaccee(2)).  If the check denies access, then the field value is displayed as 0.  The affected fields are indicated
              with the marking [PT].

              (1) _p_i_d  %d
                        The process ID.

              (2) _c_o_m_m  %s
                        The filename of the executable, in parentheses.  This is visible whether or not the executable is swapped out.

              (3) _s_t_a_t_e  %c
                        One of the following characters, indicating process state:

                        R  Running

                        S  Sleeping in an interruptible wait

                        D  Waiting in uninterruptible disk sleep

                        Z  Zombie

                        T  Stopped (on a signal) or (before Linux 2.6.33) trace stopped

                        t  Tracing stop (Linux 2.6.33 onward)

                        W  Paging (only before Linux 2.6.0)

                        X  Dead (from Linux 2.6.0 onward)

                        x  Dead (Linux 2.6.33 to 3.13 only)

                        K  Wakekill (Linux 2.6.33 to 3.13 only)

                        W  Waking (Linux 2.6.33 to 3.13 only)

                        P  Parked (Linux 3.9 to 3.13 only)

              (4) _p_p_i_d  %d
                        The PID of the parent of this process.

              (5) _p_g_r_p  %d
                        The process group ID of the process.

              (6) _s_e_s_s_i_o_n  %d
                        The session ID of the process.

              (7) _t_t_y___n_r  %d
                        The controlling terminal of the process.  (The minor device number is contained in the combination of bits 31 to 20 and 7 to 0; the major device number is in bits 15 to 8.)

              (8) _t_p_g_i_d  %d
                        The ID of the foreground process group of the controlling terminal of the process.

              (9) _f_l_a_g_s  %u
                        The kernel flags word of the process.  For bit meanings, see the PF_* defines in the Linux kernel source file _i_n_c_l_u_d_e_/_l_i_n_u_x_/_s_c_h_e_d_._h.  Details depend on the kernel version.

                        The format for this field was %lu before Linux 2.6.

              (10) _m_i_n_f_l_t  %lu
                        The number of minor faults the process has made which have not required loading a memory page from disk.

              (11) _c_m_i_n_f_l_t  %lu
                        The number of minor faults that the process's waited-for children have made.

              (12) _m_a_j_f_l_t  %lu
                        The number of major faults the process has made which have required loading a memory page from disk.

              (13) _c_m_a_j_f_l_t  %lu
                        The number of major faults that the process's waited-for children have made.

              (14) _u_t_i_m_e  %lu
                        Amount of time that this process has been scheduled in user mode, measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).  This includes guest time,  _g_u_e_s_t___t_i_m_e  (time  spent
                        running a virtual CPU, see below), so that applications that are not aware of the guest time field do not lose that time from their calculations.

              (15) _s_t_i_m_e  %lu
                        Amount of time that this process has been scheduled in kernel mode, measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).

              (16) _c_u_t_i_m_e  %ld
                        Amount  of  time that this process's waited-for children have been scheduled in user mode, measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).  (See also ttiimmeess(2).)  This
                        includes guest time, _c_g_u_e_s_t___t_i_m_e (time spent running a virtual CPU, see below).

              (17) _c_s_t_i_m_e  %ld
                        Amount of time that this process's waited-for children have been scheduled in kernel mode, measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).

              (18) _p_r_i_o_r_i_t_y  %ld
                        (Explanation for Linux 2.6) For processes running a real-time scheduling policy (_p_o_l_i_c_y below; see sscchheedd__sseettsscchheedduulleerr(2)), this is the negated scheduling priority,  minus  one;
                        that  is,  a number in the range -2 to -100, corresponding to real-time priorities 1 to 99.  For processes running under a non-real-time scheduling policy, this is the raw nice
                        value (sseettpprriioorriittyy(2)) as represented in the kernel.  The kernel stores nice values as numbers in the range 0 (high) to 39 (low), corresponding to the user-visible  nice  range
                        of -20 to 19.

                        Before Linux 2.6, this was a scaled value based on the scheduler weighting given to this process.

              (19) _n_i_c_e  %ld
                        The nice value (see sseettpprriioorriittyy(2)), a value in the range 19 (low priority) to -20 (high priority).

              (20) _n_u_m___t_h_r_e_a_d_s  %ld
                        Number of threads in this process (since Linux 2.6).  Before kernel 2.6, this field was hard coded to 0 as a placeholder for an earlier removed field.

              (21) _i_t_r_e_a_l_v_a_l_u_e  %ld
                        The time in jiffies before the next SSIIGGAALLRRMM is sent to the process due to an interval timer.  Since kernel 2.6.17, this field is no longer maintained, and is hard coded as 0.

              (22) _s_t_a_r_t_t_i_m_e  %llu
                        The  time the process started after system boot.  In kernels before Linux 2.6, this value was expressed in jiffies.  Since Linux 2.6, the value is expressed in clock ticks (di‐
                        vide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).

                        The format for this field was %lu before Linux 2.6.

              (23) _v_s_i_z_e  %lu
                        Virtual memory size in bytes.

              (24) _r_s_s  %ld
                        Resident Set Size: number of pages the process has in real memory.  This is just the pages which count toward text, data, or stack space.  This does  not  include  pages  which
                        have not been demand-loaded in, or which are swapped out.

              (25) _r_s_s_l_i_m  %lu
                        Current soft limit in bytes on the rss of the process; see the description of RRLLIIMMIITT__RRSSSS in ggeettrrlliimmiitt(2).

              (26) _s_t_a_r_t_c_o_d_e  %lu  [PT]
                        The address above which program text can run.

              (27) _e_n_d_c_o_d_e  %lu  [PT]
                        The address below which program text can run.

              (28) _s_t_a_r_t_s_t_a_c_k  %lu  [PT]
                        The address of the start (i.e., bottom) of the stack.

              (29) _k_s_t_k_e_s_p  %lu  [PT]
                        The current value of ESP (stack pointer), as found in the kernel stack page for the process.

              (30) _k_s_t_k_e_i_p  %lu  [PT]
                        The current EIP (instruction pointer).

              (31) _s_i_g_n_a_l  %lu
                        The bitmap of pending signals, displayed as a decimal number.  Obsolete, because it does not provide information on real-time signals; use _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s instead.

              (32) _b_l_o_c_k_e_d  %lu
                        The bitmap of blocked signals, displayed as a decimal number.  Obsolete, because it does not provide information on real-time signals; use _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s instead.

              (33) _s_i_g_i_g_n_o_r_e  %lu
                        The bitmap of ignored signals, displayed as a decimal number.  Obsolete, because it does not provide information on real-time signals; use _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s instead.

              (34) _s_i_g_c_a_t_c_h  %lu
                        The bitmap of caught signals, displayed as a decimal number.  Obsolete, because it does not provide information on real-time signals; use _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s instead.

              (35) _w_c_h_a_n  %lu  [PT]
                        This  is  the  "channel"  in which the process is waiting.  It is the address of a location in the kernel where the process is sleeping.  The corresponding symbolic name can be
                        found in _/_p_r_o_c_/_[_p_i_d_]_/_w_c_h_a_n.

              (36) _n_s_w_a_p  %lu
                        Number of pages swapped (not maintained).

              (37) _c_n_s_w_a_p  %lu
                        Cumulative _n_s_w_a_p for child processes (not maintained).

              (38) _e_x_i_t___s_i_g_n_a_l  %d  (since Linux 2.1.22)
                        Signal to be sent to parent when we die.

              (39) _p_r_o_c_e_s_s_o_r  %d  (since Linux 2.2.8)
                        CPU number last executed on.

              (40) _r_t___p_r_i_o_r_i_t_y  %u  (since Linux 2.5.19)
                        Real-time scheduling priority, a number in the range 1 to 99 for processes scheduled under a real-time policy, or 0, for non-real-time processes (see sscchheedd__sseettsscchheedduulleerr(2)).

              (41) _p_o_l_i_c_y  %u  (since Linux 2.5.19)
                        Scheduling policy (see sscchheedd__sseettsscchheedduulleerr(2)).  Decode using the SCHED_* constants in _l_i_n_u_x_/_s_c_h_e_d_._h.

                        The format for this field was %lu before Linux 2.6.22.

              (42) _d_e_l_a_y_a_c_c_t___b_l_k_i_o___t_i_c_k_s  %llu  (since Linux 2.6.18)
                        Aggregated block I/O delays, measured in clock ticks (centiseconds).

              (43) _g_u_e_s_t___t_i_m_e  %lu  (since Linux 2.6.24)
                        Guest time of the process (time spent running a virtual CPU for a guest operating system), measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).

              (44) _c_g_u_e_s_t___t_i_m_e  %ld  (since Linux 2.6.24)
                        Guest time of the process's children, measured in clock ticks (divide by _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_)).

              (45) _s_t_a_r_t___d_a_t_a  %lu  (since Linux 3.3)  [PT]
                        Address above which program initialized and uninitialized (BSS) data are placed.

              (46) _e_n_d___d_a_t_a  %lu  (since Linux 3.3)  [PT]
                        Address below which program initialized and uninitialized (BSS) data are placed.

              (47) _s_t_a_r_t___b_r_k  %lu  (since Linux 3.3)  [PT]
                        Address above which program heap can be expanded with bbrrkk(2).

              (48) _a_r_g___s_t_a_r_t  %lu  (since Linux 3.5)  [PT]
                        Address above which program command-line arguments (_a_r_g_v) are placed.

              (49) _a_r_g___e_n_d  %lu  (since Linux 3.5)  [PT]
                        Address below program command-line arguments (_a_r_g_v) are placed.

              (50) _e_n_v___s_t_a_r_t  %lu  (since Linux 3.5)  [PT]
                        Address above which program environment is placed.

              (51) _e_n_v___e_n_d  %lu  (since Linux 3.5)  [PT]
                        Address below which program environment is placed.

              (52) _e_x_i_t___c_o_d_e  %d  (since Linux 3.5)  [PT]
                        The thread's exit status in the form reported by wwaaiittppiidd(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_m
              Provides information about memory usage, measured in pages.  The columns are:

                  size       (1) total program size
                             (same as VmSize in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s)
                  resident   (2) resident set size
                             (same as VmRSS in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s)
                  shared     (3) number of resident shared pages (i.e., backed by a file)
                             (same as RssFile+RssShmem in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s)
                  text       (4) text (code)
                  lib        (5) library (unused since Linux 2.6; always 0)
                  data       (6) data + stack
                  dt         (7) dirty pages (unused since Linux 2.6; always 0)

       _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s
              Provides much of the information in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t and _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_m in a format that's easier for humans to parse.  Here's an example:

                  $ ccaatt //pprroocc//$$$$//ssttaattuuss
                  Name:   bash
                  Umask:  0022
                  State:  S (sleeping)
                  Tgid:   17248
                  Ngid:   0
                  Pid:    17248
                  PPid:   17200
                  TracerPid:      0
                  Uid:    1000    1000    1000    1000
                  Gid:    100     100     100     100
                  FDSize: 256
                  Groups: 16 33 100
                  NStgid: 17248
                  NSpid:  17248
                  NSpgid: 17248
                  NSsid:  17200
                  VmPeak:     131168 kB
                  VmSize:     131168 kB
                  VmLck:           0 kB
                  VmPin:           0 kB
                  VmHWM:       13484 kB
                  VmRSS:       13484 kB
                  RssAnon:     10264 kB
                  RssFile:      3220 kB
                  RssShmem:        0 kB
                  VmData:      10332 kB
                  VmStk:         136 kB
                  VmExe:         992 kB
                  VmLib:        2104 kB
                  VmPTE:          76 kB
                  VmPMD:          12 kB
                  VmSwap:          0 kB
                  HugetlbPages:          0 kB        # 4.4
                  CoreDumping:   0                       # 4.15
                  Threads:        1
                  SigQ:   0/3067
                  SigPnd: 0000000000000000
                  ShdPnd: 0000000000000000
                  SigBlk: 0000000000010000
                  SigIgn: 0000000000384004
                  SigCgt: 000000004b813efb
                  CapInh: 0000000000000000
                  CapPrm: 0000000000000000
                  CapEff: 0000000000000000
                  CapBnd: ffffffffffffffff
                  CapAmb:   0000000000000000
                  NoNewPrivs:     0
                  Seccomp:        0
                  Speculation_Store_Bypass:       vulnerable
                  Cpus_allowed:   00000001
                  Cpus_allowed_list:      0
                  Mems_allowed:   1
                  Mems_allowed_list:      0
                  voluntary_ctxt_switches:        150
                  nonvoluntary_ctxt_switches:     545

              The fields are as follows:

              * _N_a_m_e: Command run by this process.

              * _U_m_a_s_k: Process umask, expressed in octal with a leading zero; see uummaasskk(2).  (Since Linux 4.7.)

              * _S_t_a_t_e: Current state of the process.  One of "R (running)", "S (sleeping)", "D (disk sleep)", "T (stopped)", "T (tracing stop)", "Z (zombie)", or "X (dead)".

              * _T_g_i_d: Thread group ID (i.e., Process ID).

              * _N_g_i_d: NUMA group ID (0 if none; since Linux 3.13).

              * _P_i_d: Thread ID (see ggeettttiidd(2)).

              * _P_P_i_d: PID of parent process.

              * _T_r_a_c_e_r_P_i_d: PID of process tracing this process (0 if not being traced).

              * _U_i_d, _G_i_d: Real, effective, saved set, and filesystem UIDs (GIDs).

              * _F_D_S_i_z_e: Number of file descriptor slots currently allocated.

              * _G_r_o_u_p_s: Supplementary group list.

              * _N_S_t_g_i_d: Thread group ID (i.e., PID) in each of the PID namespaces of which _[_p_i_d_] is a member.  The leftmost entry shows the value with respect to the PID namespace of the process  that
                mounted this procfs (or the root namespace if mounted by the kernel), followed by the value in successively nested inner namespaces.  (Since Linux 4.1.)

              * _N_S_p_i_d: Thread ID in each of the PID namespaces of which _[_p_i_d_] is a member.  The fields are ordered as for _N_S_t_g_i_d.  (Since Linux 4.1.)

              * _N_S_p_g_i_d: Process group ID in each of the PID namespaces of which _[_p_i_d_] is a member.  The fields are ordered as for _N_S_t_g_i_d.  (Since Linux 4.1.)

              * _N_S_s_i_d: descendant namespace session ID hierarchy Session ID in each of the PID namespaces of which _[_p_i_d_] is a member.  The fields are ordered as for _N_S_t_g_i_d.  (Since Linux 4.1.)

              * _V_m_P_e_a_k: Peak virtual memory size.

              * _V_m_S_i_z_e: Virtual memory size.

              * _V_m_L_c_k: Locked memory size (see mmlloocckk(2)).

              * _V_m_P_i_n: Pinned memory size (since Linux 3.2).  These are pages that can't be moved because something needs to directly access physical memory.

              * _V_m_H_W_M: Peak resident set size ("high water mark").

              * _V_m_R_S_S: Resident set size.  Note that the value here is the sum of _R_s_s_A_n_o_n, _R_s_s_F_i_l_e, and _R_s_s_S_h_m_e_m.

              * _R_s_s_A_n_o_n: Size of resident anonymous memory.  (since Linux 4.5).

              * _R_s_s_F_i_l_e: Size of resident file mappings.  (since Linux 4.5).

              * _R_s_s_S_h_m_e_m: Size of resident shared memory (includes System V shared memory, mappings from ttmmppffss(5), and shared anonymous mappings).  (since Linux 4.5).

              * _V_m_D_a_t_a, _V_m_S_t_k, _V_m_E_x_e: Size of data, stack, and text segments.

              * _V_m_L_i_b: Shared library code size.

              * _V_m_P_T_E: Page table entries size (since Linux 2.6.10).

              * _V_m_P_M_D: Size of second-level page tables (added in Linux 4.0; removed in Linux 4.15).

              * _V_m_S_w_a_p: Swapped-out virtual memory size by anonymous private pages; shmem swap usage is not included (since Linux 2.6.34).

              * _H_u_g_e_t_l_b_P_a_g_e_s: Size of hugetlb memory portions (since Linux 4.4).

              * _C_o_r_e_D_u_m_p_i_n_g:  Contains  the  value  1  if  the  process is currently dumping core, and 0 if it is not (since Linux 4.15).  This information can be used by a monitoring process to avoid
                killing a process that is currently dumping core, which could result in a corrupted core dump file.

              * _T_h_r_e_a_d_s: Number of threads in process containing this thread.

              * _S_i_g_Q: This field contains two slash-separated numbers that relate to queued signals for the real user ID of this process.  The first of these is the number of currently queued  signals
                for this real user ID, and the second is the resource limit on the number of queued signals for this process (see the description of RRLLIIMMIITT__SSIIGGPPEENNDDIINNGG in ggeettrrlliimmiitt(2)).

              * _S_i_g_P_n_d, _S_h_d_P_n_d: Mask (expressed in hexadecimal) of signals pending for thread and for process as a whole (see pptthhrreeaaddss(7) and ssiiggnnaall(7)).

              * _S_i_g_B_l_k, _S_i_g_I_g_n, _S_i_g_C_g_t: Masks (expressed in hexadecimal) indicating signals being blocked, ignored, and caught (see ssiiggnnaall(7)).

              * _C_a_p_I_n_h, _C_a_p_P_r_m, _C_a_p_E_f_f: Masks (expressed in hexadecimal) of capabilities enabled in inheritable, permitted, and effective sets (see ccaappaabbiilliittiieess(7)).

              * _C_a_p_B_n_d: Capability bounding set, expressed in hexadecimal (since Linux 2.6.26, see ccaappaabbiilliittiieess(7)).

              * _C_a_p_A_m_b: Ambient capability set, expressed in hexadecimal (since Linux 4.3, see ccaappaabbiilliittiieess(7)).

              * _N_o_N_e_w_P_r_i_v_s: Value of the _n_o___n_e_w___p_r_i_v_s bit (since Linux 4.10, see pprrccttll(2)).

              * _S_e_c_c_o_m_p:  Seccomp  mode  of the process (since Linux 3.8, see sseeccccoommpp(2)).  0 means SSEECCCCOOMMPP__MMOODDEE__DDIISSAABBLLEEDD; 1 means SSEECCCCOOMMPP__MMOODDEE__SSTTRRIICCTT; 2 means SSEECCCCOOMMPP__MMOODDEE__FFIILLTTEERR.  This field is pro‐
                vided only if the kernel was built with the CCOONNFFIIGG__SSEECCCCOOMMPP kernel configuration option enabled.

              * _S_p_e_c_u_l_a_t_i_o_n___S_t_o_r_e___B_y_p_a_s_s: Speculation flaw mitigation state (since Linux 4.17, see pprrccttll(2)).

              * _C_p_u_s___a_l_l_o_w_e_d: Hexadecimal mask of CPUs on which this process may run (since Linux 2.6.24, see ccppuusseett(7)).

              * _C_p_u_s___a_l_l_o_w_e_d___l_i_s_t: Same as previous, but in "list format" (since Linux 2.6.26, see ccppuusseett(7)).

              * _M_e_m_s___a_l_l_o_w_e_d: Mask of memory nodes allowed to this process (since Linux 2.6.24, see ccppuusseett(7)).

              * _M_e_m_s___a_l_l_o_w_e_d___l_i_s_t: Same as previous, but in "list format" (since Linux 2.6.26, see ccppuusseett(7)).

              * _v_o_l_u_n_t_a_r_y___c_t_x_t___s_w_i_t_c_h_e_s, _n_o_n_v_o_l_u_n_t_a_r_y___c_t_x_t___s_w_i_t_c_h_e_s: Number of voluntary and involuntary context switches (since Linux 2.6.23).

       _/_p_r_o_c_/_[_p_i_d_]_/_s_y_s_c_a_l_l (since Linux 2.6.27)
              This file exposes the system call number and argument registers for the system call currently being executed by the process, followed by the values  of  the  stack  pointer  and  program
              counter registers.  The values of all six argument registers are exposed, although most system calls use fewer registers.

              If  the  process is blocked, but not in a system call, then the file displays -1 in place of the system call number, followed by just the values of the stack pointer and program counter.
              If process is not blocked, then the file contains just the string "running".

              This file is present only if the kernel was configured with CCOONNFFIIGG__HHAAVVEE__AARRCCHH__TTRRAACCEEHHOOOOKK.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__AATTTTAACCHH__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k (since Linux 2.6.0)
              This is a directory that contains one subdirectory for each thread in the process.  The name of each subdirectory is the numerical thread ID (_[_t_i_d_]) of the thread (see ggeettttiidd(2)).

              Within each of these subdirectories, there is a set of files with the same names and contents as under the _/_p_r_o_c_/_[_p_i_d_] directories.  For attributes that are shared by  all  threads,  the
              contents  for  each  of the files under the _t_a_s_k_/_[_t_i_d_] subdirectories will be the same as in the corresponding file in the parent _/_p_r_o_c_/_[_p_i_d_] directory (e.g., in a multithreaded process,
              all of the _t_a_s_k_/_[_t_i_d_]_/_c_w_d files will have the same value as the _/_p_r_o_c_/_[_p_i_d_]_/_c_w_d file in the parent directory, since all of the threads in a process share a working directory).   For  at‐
              tributes that are distinct for each thread, the corresponding files under _t_a_s_k_/_[_t_i_d_] may have different values (e.g., various fields in each of the _t_a_s_k_/_[_t_i_d_]_/_s_t_a_t_u_s files may be differ‐
              ent for each thread), or they might not exist in _/_p_r_o_c_/_[_p_i_d_] at all.

              In a multithreaded process, the contents of the _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k directory are not available if the main thread has already terminated (typically by calling pptthhrreeaadd__eexxiitt(3)).

       _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_]_/_c_h_i_l_d_r_e_n (since Linux 3.5)
              A space-separated list of child tasks of this task.  Each child task is represented by its TID.

              This option is intended for use by the checkpoint-restore (CRIU) system, and reliably provides a list of children only if all of the child processes are stopped or frozen.  It  does  not
              work  properly  if children of the target task exit while the file is being read!  Exiting children may cause non-exiting children to be omitted from the list.  This makes this interface
              even more unreliable than classic PID-based approaches if the inspected task and its children aren't frozen, and most code should probably not use this interface.

              Until Linux 4.2, the presence of this file was governed by the CCOONNFFIIGG__CCHHEECCKKPPOOIINNTT__RREESSTTOORREE kernel configuration option.  Since Linux 4.2, it is governed by the CCOONNFFIIGG__PPRROOCC__CCHHIILLDDRREENN option.

       _/_p_r_o_c_/_[_p_i_d_]_/_t_i_m_e_r_s (since Linux 3.10)
              A list of the POSIX timers for this process.  Each timer is listed with a line that starts with the string "ID:".  For example:

                  ID: 1
                  signal: 60/00007fff86e452a8
                  notify: signal/pid.2634
                  ClockID: 0
                  ID: 0
                  signal: 60/00007fff86e452a8
                  notify: signal/pid.2634
                  ClockID: 1

              The lines shown for each timer have the following meanings:

              _I_D     The ID for this timer.  This is not the same as the timer ID returned by ttiimmeerr__ccrreeaattee(2); rather, it is the same kernel-internal ID that is available via the _s_i___t_i_m_e_r_i_d  field  of
                     the _s_i_g_i_n_f_o___t structure (see ssiiggaaccttiioonn(2)).

              _s_i_g_n_a_l This  is the signal number that this timer uses to deliver notifications followed by a slash, and then the _s_i_g_e_v___v_a_l_u_e value supplied to the signal handler.  Valid only for timers
                     that notify via a signal.

              _n_o_t_i_f_y The part before the slash specifies the mechanism that this timer uses to deliver notifications, and is one of "thread", "signal", or "none".  Immediately following the  slash  is
                     either  the  string  "tid"  for timers with SSIIGGEEVV__TTHHRREEAADD__IIDD notification, or "pid" for timers that notify by other mechanisms.  Following the "." is the PID of the process (or the
                     kernel thread ID of the thread)  that will be delivered a signal if the timer delivers notifications via a signal.

              _C_l_o_c_k_I_D
                     This field identifies the clock that the timer uses for measuring time.  For most clocks, this is a number that matches  one  of  the  user-space  CCLLOOCCKK__**  constants  exposed  via
                     _<_t_i_m_e_._h_>.  CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD timers display with a value of -6 in this field.  CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD timers display with a value of -2 in this field.

              This file is available only when the kernel was configured with CCOONNFFIIGG__CCHHEECCKKPPOOIINNTT__RREESSTTOORREE.

       _/_p_r_o_c_/_[_p_i_d_]_/_t_i_m_e_r_s_l_a_c_k___n_s (since Linux 4.6)
              This  file  exposes the process's "current" timer slack value, expressed in nanoseconds.  The file is writable, allowing the process's timer slack value to be changed.  Writing 0 to this
              file resets the "current" timer slack to the "default" timer slack value.  For further details, see the discussion of PPRR__SSEETT__TTIIMMEERRSSLLAACCKK in pprrccttll(2).

              Initially, permission to access this file was governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__AATTTTAACCHH__FFSSCCRREEDDSS check (see ppttrraaccee(2)).  However, this was subsequently deemed too strict  a  re‐
              quirement  (and  had  the side effect that requiring a process to have the CCAAPP__SSYYSS__PPTTRRAACCEE capability would also allow it to view and change any process's memory).  Therefore, since Linux
              4.9, only the (weaker) CCAAPP__SSYYSS__NNIICCEE capability is required to access this file.

       _/_p_r_o_c_/_[_p_i_d_]_/_u_i_d___m_a_p, _/_p_r_o_c_/_[_p_i_d_]_/_g_i_d___m_a_p (since Linux 3.5)
              See uusseerr__nnaammeessppaacceess(7).

       _/_p_r_o_c_/_[_p_i_d_]_/_w_c_h_a_n (since Linux 2.6.0)
              The symbolic name corresponding to the location in the kernel where the process is sleeping.

              Permission to access this file is governed by a ptrace access mode PPTTRRAACCEE__MMOODDEE__RREEAADD__FFSSCCRREEDDSS check; see ppttrraaccee(2).

       _/_p_r_o_c_/_[_t_i_d_]
              There  is a numerical subdirectory for each running thread that is not a thread group leader (i.e., a thread whose thread ID is not the same as its process ID); the subdirectory is named
              by the thread ID.  Each one of these subdirectories contains files and subdirectories exposing information about the thread with the thread ID _t_i_d.  The contents of these directories are
              the same as the corresponding _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_] directories.

              The _/_p_r_o_c_/_[_t_i_d_] subdirectories are _n_o_t visible when iterating through _/_p_r_o_c with ggeettddeennttss(2) (and thus are _n_o_t visible when one uses llss(1) to view the contents of _/_p_r_o_c).   However,  the
              pathnames of these directories are visible to (i.e., usable as arguments in) system calls that operate on pathnames.

       _/_p_r_o_c_/_a_p_m
              Advanced power management version and battery information when CCOONNFFIIGG__AAPPMM is defined at kernel compilation time.

       _/_p_r_o_c_/_b_u_d_d_y_i_n_f_o
              This  file  contains  information  which is used for diagnosing memory fragmentation issues.  Each line starts with the identification of the node and the name of the zone which together
              identify a memory region This is then followed by the count of available chunks of a certain order in which these zones are split.  The size in bytes of a certain order is given  by  the
              formula:

                  (2^order) * PAGE_SIZE

              The  binary buddy allocator algorithm inside the kernel will split one chunk into two chunks of a smaller order (thus with half the size) or combine two contiguous chunks into one larger
              chunk of a higher order (thus with double the size) to satisfy allocation requests and to counter memory fragmentation.  The order matches the column number, when starting  to  count  at
              zero.

              For example on an x86-64 system:

  Node 0, zone     DMA     1    1    1    0    2    1    1    0    1    1    3
  Node 0, zone   DMA32    65   47    4   81   52   28   13   10    5    1  404
  Node 0, zone  Normal   216   55  189  101   84   38   37   27    5    3  587

              In  this  example,  there is one node containing three zones and there are 11 different chunk sizes.  If the page size is 4 kilobytes, then the first zone called _D_M_A (on x86 the first 16
              megabyte of memory) has 1 chunk of 4 kilobytes (order 0) available and has 3 chunks of 4 megabytes (order 10) available.

              If the memory is heavily fragmented, the counters for higher order chunks will be zero and allocation of large contiguous areas will fail.

              Further information about the zones can be found in _/_p_r_o_c_/_z_o_n_e_i_n_f_o.

       _/_p_r_o_c_/_b_u_s
              Contains subdirectories for installed busses.

       _/_p_r_o_c_/_b_u_s_/_p_c_c_a_r_d
              Subdirectory for PCMCIA devices when CCOONNFFIIGG__PPCCMMCCIIAA is set at kernel compilation time.

       _/_p_r_o_c_/_b_u_s_/_p_c_c_a_r_d_/_d_r_i_v_e_r_s

       _/_p_r_o_c_/_b_u_s_/_p_c_i
              Contains various bus subdirectories and pseudo-files containing information about PCI busses, installed devices, and device drivers.  Some of these files are not ASCII.

       _/_p_r_o_c_/_b_u_s_/_p_c_i_/_d_e_v_i_c_e_s
              Information about PCI devices.  They may be accessed through llssppccii(8) and sseettppccii(8).

       _/_p_r_o_c_/_c_g_r_o_u_p_s (since Linux 2.6.24)
              See ccggrroouuppss(7).

       _/_p_r_o_c_/_c_m_d_l_i_n_e
              Arguments passed to the Linux kernel at boot time.  Often done via a boot manager such as lliilloo(8) or ggrruubb(8).

       _/_p_r_o_c_/_c_o_n_f_i_g_._g_z (since Linux 2.6)
              This file exposes the configuration options that were used to build the currently running kernel, in the same format as they would be shown in the _._c_o_n_f_i_g file that resulted when config‐
              uring  the  kernel (using _m_a_k_e _x_c_o_n_f_i_g, _m_a_k_e _c_o_n_f_i_g, or similar).  The file contents are compressed; view or search them using zzccaatt(1) and zzggrreepp(1).  As long as no changes have been made
              to the following file, the contents of _/_p_r_o_c_/_c_o_n_f_i_g_._g_z are the same as those provided by:

                  cat /lib/modules/$(uname -r)/build/.config

              _/_p_r_o_c_/_c_o_n_f_i_g_._g_z is provided only if the kernel is configured with CCOONNFFIIGG__IIKKCCOONNFFIIGG__PPRROOCC.

       _/_p_r_o_c_/_c_r_y_p_t_o
              A list of the ciphers provided by the kernel crypto API.  For details, see the kernel _L_i_n_u_x _K_e_r_n_e_l _C_r_y_p_t_o _A_P_I  documentation  available  under  the  kernel  source  directory  _D_o_c_u_m_e_n_t_a_‐
              _t_i_o_n_/_c_r_y_p_t_o_/ (or _D_o_c_u_m_e_n_t_a_t_i_o_n_/_D_o_c_B_o_o_k before 4.10; the documentation can be built using a command such as _m_a_k_e _h_t_m_l_d_o_c_s in the root directory of the kernel source tree).

       _/_p_r_o_c_/_c_p_u_i_n_f_o
              This  is  a  collection of CPU and system architecture dependent items, for each supported architecture a different list.  Two common entries are _p_r_o_c_e_s_s_o_r which gives CPU number and _b_o_‐
              _g_o_m_i_p_s; a system constant that is calculated during kernel initialization.  SMP machines have information for each CPU.  The llssccppuu(1) command gathers its information from this file.

       _/_p_r_o_c_/_d_e_v_i_c_e_s
              Text listing of major numbers and device groups.  This can be used by MAKEDEV scripts for consistency with the kernel.

       _/_p_r_o_c_/_d_i_s_k_s_t_a_t_s (since Linux 2.5.69)
              This file contains disk I/O statistics for each disk device.  See the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_i_o_s_t_a_t_s_._t_x_t for further information.

       _/_p_r_o_c_/_d_m_a
              This is a list of the registered _I_S_A DMA (direct memory access) channels in use.

       _/_p_r_o_c_/_d_r_i_v_e_r
              Empty subdirectory.

       _/_p_r_o_c_/_e_x_e_c_d_o_m_a_i_n_s
              List of the execution domains (ABI personalities).

       _/_p_r_o_c_/_f_b
              Frame buffer information when CCOONNFFIIGG__FFBB is defined during kernel compilation.

       _/_p_r_o_c_/_f_i_l_e_s_y_s_t_e_m_s
              A text listing of the filesystems which are supported by the kernel, namely filesystems which were compiled into the kernel or whose kernel  modules  are  currently  loaded.   (See  also
              ffiilleessyysstteemmss(5).)  If a filesystem is marked with "nodev", this means that it does not require a block device to be mounted (e.g., virtual filesystem, network filesystem).

              Incidentally,  this file may be used by mmoouunntt(8) when no filesystem is specified and it didn't manage to determine the filesystem type.  Then filesystems contained in this file are tried
              (excepted those that are marked with "nodev").

       _/_p_r_o_c_/_f_s
              Contains subdirectories that in turn contain files with information about (certain) mounted filesystems.

       _/_p_r_o_c_/_i_d_e
              This directory exists on systems with the IDE bus.  There are directories for each IDE channel and attached device.  Files include:

                  cache              buffer size in KB
                  capacity           number of sectors
                  driver             driver version
                  geometry           physical and logical geometry
                  identify           in hexadecimal
                  media              media type
                  model              manufacturer's model number
                  settings           drive settings
                  smart_thresholds   in hexadecimal
                  smart_values       in hexadecimal

              The hhddppaarrmm(8) utility provides access to this information in a friendly format.

       _/_p_r_o_c_/_i_n_t_e_r_r_u_p_t_s
              This is used to record the number of interrupts per CPU per IO device.  Since Linux 2.6.24, for the i386 and x86-64 architectures, at least, this also includes interrupts internal to the
              system  (that is, not associated with a device as such), such as NMI (nonmaskable interrupt), LOC (local timer interrupt), and for SMP systems, TLB (TLB flush interrupt), RES (reschedul‐
              ing interrupt), CAL (remote function call interrupt), and possibly others.  Very easy to read formatting, done in ASCII.

       _/_p_r_o_c_/_i_o_m_e_m
              I/O memory map in Linux 2.4.

       _/_p_r_o_c_/_i_o_p_o_r_t_s
              This is a list of currently registered Input-Output port regions that are in use.

       _/_p_r_o_c_/_k_a_l_l_s_y_m_s (since Linux 2.5.71)
              This holds the kernel exported symbol definitions used by the mmoodduulleess(X) tools to dynamically link and bind loadable modules.  In Linux 2.5.47 and earlier, a similar file  with  slightly
              different syntax was named _k_s_y_m_s.

       _/_p_r_o_c_/_k_c_o_r_e
              This  file  represents  the physical memory of the system and is stored in the ELF core file format.  With this pseudo-file, and an unstripped kernel (_/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_v_m_l_i_n_u_x) binary, GDB
              can be used to examine the current state of any kernel data structures.

              The total length of the file is the size of physical memory (RAM) plus 4 KiB.

       _/_p_r_o_c_/_k_e_y_s (since Linux 2.6.10)
              See kkeeyyrriinnggss(7).

       _/_p_r_o_c_/_k_e_y_-_u_s_e_r_s (since Linux 2.6.10)
              See kkeeyyrriinnggss(7).

       _/_p_r_o_c_/_k_m_s_g
              This file can be used instead of the ssyysslloogg(2) system call to read kernel messages.  A process must have superuser privileges to read this file, and only one  process  should  read  this
              file.  This file should not be read if a syslog process is running which uses the ssyysslloogg(2) system call facility to log kernel messages.

              Information in this file is retrieved with the ddmmeessgg(1) program.

       _/_p_r_o_c_/_k_p_a_g_e_c_g_r_o_u_p (since Linux 4.3)
              This file contains a 64-bit inode number of the memory cgroup each page is charged to, indexed by page frame number (see the discussion of _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p).

              The _/_p_r_o_c_/_k_p_a_g_e_c_g_r_o_u_p file is present only if the CCOONNFFIIGG__MMEEMMCCGG kernel configuration option is enabled.

       _/_p_r_o_c_/_k_p_a_g_e_c_o_u_n_t (since Linux 2.6.25)
              This file contains a 64-bit count of the number of times each physical page frame is mapped, indexed by page frame number (see the discussion of _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p).

              The _/_p_r_o_c_/_k_p_a_g_e_c_o_u_n_t file is present only if the CCOONNFFIIGG__PPRROOCC__PPAAGGEE__MMOONNIITTOORR kernel configuration option is enabled.

       _/_p_r_o_c_/_k_p_a_g_e_f_l_a_g_s (since Linux 2.6.25)
              This file contains 64-bit masks corresponding to each physical page frame; it is indexed by page frame number (see the discussion of _/_p_r_o_c_/_[_p_i_d_]_/_p_a_g_e_m_a_p).  The bits are as follows:

                   0 - KPF_LOCKED
                   1 - KPF_ERROR
                   2 - KPF_REFERENCED
                   3 - KPF_UPTODATE
                   4 - KPF_DIRTY
                   5 - KPF_LRU
                   6 - KPF_ACTIVE
                   7 - KPF_SLAB
                   8 - KPF_WRITEBACK
                   9 - KPF_RECLAIM
                  10 - KPF_BUDDY
                  11 - KPF_MMAP           (since Linux 2.6.31)
                  12 - KPF_ANON           (since Linux 2.6.31)
                  13 - KPF_SWAPCACHE      (since Linux 2.6.31)
                  14 - KPF_SWAPBACKED     (since Linux 2.6.31)
                  15 - KPF_COMPOUND_HEAD  (since Linux 2.6.31)
                  16 - KPF_COMPOUND_TAIL  (since Linux 2.6.31)
                  17 - KPF_HUGE           (since Linux 2.6.31)
                  18 - KPF_UNEVICTABLE    (since Linux 2.6.31)
                  19 - KPF_HWPOISON       (since Linux 2.6.31)
                  20 - KPF_NOPAGE         (since Linux 2.6.31)
                  21 - KPF_KSM            (since Linux 2.6.32)
                  22 - KPF_THP            (since Linux 3.4)
                  23 - KPF_BALLOON        (since Linux 3.18)
                  24 - KPF_ZERO_PAGE      (since Linux 4.0)
                  25 - KPF_IDLE           (since Linux 4.3)

              For  further details on the meanings of these bits, see the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_p_a_g_e_m_a_p_._r_s_t.  Before kernel 2.6.29, KKPPFF__WWRRIITTEEBBAACCKK, KKPPFF__RREECCLLAAIIMM, KKPPFF__BBUUDDDDYY, and
              KKPPFF__LLOOCCKKEEDD did not report correctly.

              The _/_p_r_o_c_/_k_p_a_g_e_f_l_a_g_s file is present only if the CCOONNFFIIGG__PPRROOCC__PPAAGGEE__MMOONNIITTOORR kernel configuration option is enabled.

       _/_p_r_o_c_/_k_s_y_m_s (Linux 1.1.23–2.5.47)
              See _/_p_r_o_c_/_k_a_l_l_s_y_m_s.

       _/_p_r_o_c_/_l_o_a_d_a_v_g
              The first three fields in this file are load average figures giving the number of jobs in the run queue (state R) or waiting for disk I/O (state D) averaged over 1, 5,  and  15  minutes.
              They are the same as the load average numbers given by uuppttiimmee(1) and other programs.  The fourth field consists of two numbers separated by a slash (/).  The first of these is the number
              of currently runnable kernel scheduling entities (processes, threads).  The value after the slash is the number of kernel scheduling entities that currently exist  on  the  system.   The
              fifth field is the PID of the process that was most recently created on the system.

       _/_p_r_o_c_/_l_o_c_k_s
              This file shows current file locks (fflloocckk(2) and ffccnnttll(2)) and leases (ffccnnttll(2)).

              An example of the content shown in this file is the following:

                  1: POSIX  ADVISORY  READ  5433 08:01:7864448 128 128
                  2: FLOCK  ADVISORY  WRITE 2001 08:01:7864554 0 EOF
                  3: FLOCK  ADVISORY  WRITE 1568 00:2f:32388 0 EOF
                  4: POSIX  ADVISORY  WRITE 699 00:16:28457 0 EOF
                  5: POSIX  ADVISORY  WRITE 764 00:16:21448 0 0
                  6: POSIX  ADVISORY  READ  3548 08:01:7867240 1 1
                  7: POSIX  ADVISORY  READ  3548 08:01:7865567 1826 2335
                  8: OFDLCK ADVISORY  WRITE -1 08:01:8713209 128 191

              The fields shown in each line are as follows:

              (1) The ordinal position of the lock in the list.

              (2) The lock type.  Values that may appear here include:

                  FFLLOOCCKK  This is a BSD file lock created using fflloocckk(2).

                  OOFFDDLLCCKK This is an open file description (OFD) lock created using ffccnnttll(2).

                  PPOOSSIIXX  This is a POSIX byte-range lock created using ffccnnttll(2).

              (3) Among the strings that can appear here are the following:

                  AADDVVIISSOORRYY
                         This is an advisory lock.

                  MMAANNDDAATTOORRYY
                         This is a mandatory lock.

              (4) The type of lock.  Values that can appear here are:

                  RREEAADD   This is a POSIX or OFD read lock, or a BSD shared lock.

                  WWRRIITTEE  This is a POSIX or OFD write lock, or a BSD exclusive lock.

              (5) The PID of the process that owns the lock.

                  Because  OFD  locks  are not owned by a single process (since multiple processes may have file descriptors that refer to the same open file description), the value -1 is displayed in
                  this field for OFD locks.  (Before kernel 4.14, a bug meant that the PID of the process that initially acquired the lock was displayed instead of the value -1.)

              (6) Three colon-separated subfields that identify the major and minor device ID of the device containing the filesystem where the locked file resides, followed by the inode number of the
                  locked file.

              (7) The byte offset of the first byte of the lock.  For BSD locks, this value is always 0.

              (8) The byte offset of the last byte of the lock.  EEOOFF in this field means that the lock extends to the end of the file.  For BSD locks, the value shown is always _E_O_F.

              Since  Linux  4.9, the list of locks shown in _/_p_r_o_c_/_l_o_c_k_s is filtered to show just the locks for the processes in the PID namespace (see ppiidd__nnaammeessppaacceess(7)) for which the _/_p_r_o_c filesystem
              was mounted.  (In the initial PID namespace, there is no filtering of the records shown in this file.)

              The llsslloocckkss(8) command provides a bit more information about each lock.

       _/_p_r_o_c_/_m_a_l_l_o_c (only up to and including Linux 2.2)
              This file is present only if CCOONNFFIIGG__DDEEBBUUGG__MMAALLLLOOCC was defined during compilation.

       _/_p_r_o_c_/_m_e_m_i_n_f_o
              This file reports statistics about memory usage on the system.  It is used by ffrreeee(1) to report the amount of free and used memory (both physical and swap) on the system as well  as  the
              shared  memory  and  buffers  used  by the kernel.  Each line of the file consists of a parameter name, followed by a colon, the value of the parameter, and an option unit of measurement
              (e.g., "kB").  The list below describes the parameter names and the format specifier required to read the field value.  Except as noted below, all of the fields have been  present  since
              at least Linux 2.6.0.  Some fields are displayed only if the kernel was configured with various options; those dependencies are noted in the list.

              _M_e_m_T_o_t_a_l %lu
                     Total usable RAM (i.e., physical RAM minus a few reserved bits and the kernel binary code).

              _M_e_m_F_r_e_e %lu
                     The sum of _L_o_w_F_r_e_e+_H_i_g_h_F_r_e_e.

              _M_e_m_A_v_a_i_l_a_b_l_e %lu (since Linux 3.14)
                     An estimate of how much memory is available for starting new applications, without swapping.

              _B_u_f_f_e_r_s %lu
                     Relatively temporary storage for raw disk blocks that shouldn't get tremendously large (20MB or so).

              _C_a_c_h_e_d %lu
                     In-memory cache for files read from the disk (the page cache).  Doesn't include _S_w_a_p_C_a_c_h_e_d.

              _S_w_a_p_C_a_c_h_e_d %lu
                     Memory  that once was swapped out, is swapped back in but still also is in the swap file.  (If memory pressure is high, these pages don't need to be swapped out again because they
                     are already in the swap file.  This saves I/O.)

              _A_c_t_i_v_e %lu
                     Memory that has been used more recently and usually not reclaimed unless absolutely necessary.

              _I_n_a_c_t_i_v_e %lu
                     Memory which has been less recently used.  It is more eligible to be reclaimed for other purposes.

              _A_c_t_i_v_e_(_a_n_o_n_) %lu (since Linux 2.6.28)
                     [To be documented.]

              _I_n_a_c_t_i_v_e_(_a_n_o_n_) %lu (since Linux 2.6.28)
                     [To be documented.]

              _A_c_t_i_v_e_(_f_i_l_e_) %lu (since Linux 2.6.28)
                     [To be documented.]

              _I_n_a_c_t_i_v_e_(_f_i_l_e_) %lu (since Linux 2.6.28)
                     [To be documented.]

              _U_n_e_v_i_c_t_a_b_l_e %lu (since Linux 2.6.28)
                     (From Linux 2.6.28 to 2.6.30, CCOONNFFIIGG__UUNNEEVVIICCTTAABBLLEE__LLRRUU was required.)  [To be documented.]

              _M_l_o_c_k_e_d %lu (since Linux 2.6.28)
                     (From Linux 2.6.28 to 2.6.30, CCOONNFFIIGG__UUNNEEVVIICCTTAABBLLEE__LLRRUU was required.)  [To be documented.]

              _H_i_g_h_T_o_t_a_l %lu
                     (Starting with Linux 2.6.19, CCOONNFFIIGG__HHIIGGHHMMEEMM is required.)  Total amount of highmem.  Highmem is all memory above ~860MB of physical memory.  Highmem areas are  for  use  by  user-
                     space programs, or for the page cache.  The kernel must use tricks to access this memory, making it slower to access than lowmem.

              _H_i_g_h_F_r_e_e %lu
                     (Starting with Linux 2.6.19, CCOONNFFIIGG__HHIIGGHHMMEEMM is required.)  Amount of free highmem.

              _L_o_w_T_o_t_a_l %lu
                     (Starting  with Linux 2.6.19, CCOONNFFIIGG__HHIIGGHHMMEEMM is required.)  Total amount of lowmem.  Lowmem is memory which can be used for everything that highmem can be used for, but it is also
                     available for the kernel's use for its own data structures.  Among many other things, it is where everything from _S_l_a_b is allocated.  Bad things happen when you're out of lowmem.

              _L_o_w_F_r_e_e %lu
                     (Starting with Linux 2.6.19, CCOONNFFIIGG__HHIIGGHHMMEEMM is required.)  Amount of free lowmem.

              _M_m_a_p_C_o_p_y %lu (since Linux 2.6.29)
                     (CCOONNFFIIGG__MMMMUU is required.)  [To be documented.]

              _S_w_a_p_T_o_t_a_l %lu
                     Total amount of swap space available.

              _S_w_a_p_F_r_e_e %lu
                     Amount of swap space that is currently unused.

              _D_i_r_t_y %lu
                     Memory which is waiting to get written back to the disk.

              _W_r_i_t_e_b_a_c_k %lu
                     Memory which is actively being written back to the disk.

              _A_n_o_n_P_a_g_e_s %lu (since Linux 2.6.18)
                     Non-file backed pages mapped into user-space page tables.

              _M_a_p_p_e_d %lu
                     Files which have been mapped into memory (with mmmmaapp(2)), such as libraries.

              _S_h_m_e_m %lu (since Linux 2.6.32)
                     Amount of memory consumed in ttmmppffss(5) filesystems.

              _K_R_e_c_l_a_i_m_a_b_l_e %lu (since Linux 4.20)
                     Kernel allocations that the kernel will attempt to reclaim under memory pressure.  Includes _S_R_e_c_l_a_i_m_a_b_l_e (below), and other direct allocations with a shrinker.

              _S_l_a_b %lu
                     In-kernel data structures cache.  (See ssllaabbiinnffoo(5).)

              _S_R_e_c_l_a_i_m_a_b_l_e %lu (since Linux 2.6.19)
                     Part of _S_l_a_b, that might be reclaimed, such as caches.

              _S_U_n_r_e_c_l_a_i_m %lu (since Linux 2.6.19)
                     Part of _S_l_a_b, that cannot be reclaimed on memory pressure.

              _K_e_r_n_e_l_S_t_a_c_k %lu (since Linux 2.6.32)
                     Amount of memory allocated to kernel stacks.

              _P_a_g_e_T_a_b_l_e_s %lu (since Linux 2.6.18)
                     Amount of memory dedicated to the lowest level of page tables.

              _Q_u_i_c_k_l_i_s_t_s %lu (since Linux 2.6.27)
                     (CCOONNFFIIGG__QQUUIICCKKLLIISSTT is required.)  [To be documented.]

              _N_F_S___U_n_s_t_a_b_l_e %lu (since Linux 2.6.18)
                     NFS pages sent to the server, but not yet committed to stable storage.

              _B_o_u_n_c_e %lu (since Linux 2.6.18)
                     Memory used for block device "bounce buffers".

              _W_r_i_t_e_b_a_c_k_T_m_p %lu (since Linux 2.6.26)
                     Memory used by FUSE for temporary writeback buffers.

              _C_o_m_m_i_t_L_i_m_i_t %lu (since Linux 2.6.10)
                     This is the total amount of memory currently available to be allocated on the system, expressed in kilobytes.  This limit is adhered to only if strict overcommit accounting is en‐
                     abled  (mode  2 in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y).  The limit is calculated according to the formula described under _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y.  For further details, see the
                     kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_v_m_/_o_v_e_r_c_o_m_m_i_t_-_a_c_c_o_u_n_t_i_n_g_._r_s_t.

              _C_o_m_m_i_t_t_e_d___A_S %lu
                     The amount of memory presently allocated on the system.  The committed memory is a sum of all of the memory which has been allocated by processes, even if it has not  been  "used"
                     by  them as of yet.  A process which allocates 1GB of memory (using mmaalllloocc(3) or similar), but touches only 300MB of that memory will show up as using only 300MB of memory even if
                     it has the address space allocated for the entire 1GB.

                     This 1GB is memory which has been "committed" to by the VM and can be used at any time by the allocating application.  With strict overcommit enabled on  the  system  (mode  2  in
                     _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y),  allocations  which would exceed the _C_o_m_m_i_t_L_i_m_i_t will not be permitted.  This is useful if one needs to guarantee that processes will not fail due
                     to lack of memory once that memory has been successfully allocated.

              _V_m_a_l_l_o_c_T_o_t_a_l %lu
                     Total size of vmalloc memory area.

              _V_m_a_l_l_o_c_U_s_e_d %lu
                     Amount of vmalloc area which is used.  Since Linux 4.4, this field is no longer calculated, and is hard coded as 0.  See _/_p_r_o_c_/_v_m_a_l_l_o_c_i_n_f_o.

              _V_m_a_l_l_o_c_C_h_u_n_k %lu
                     Largest contiguous block of vmalloc area which is free.  Since Linux 4.4, this field is no longer calculated and is hard coded as 0.  See _/_p_r_o_c_/_v_m_a_l_l_o_c_i_n_f_o.

              _H_a_r_d_w_a_r_e_C_o_r_r_u_p_t_e_d %lu (since Linux 2.6.32)
                     (CCOONNFFIIGG__MMEEMMOORRYY__FFAAIILLUURREE is required.)  [To be documented.]

              _L_a_z_y_F_r_e_e %lu (since Linux 4.12)
                     Shows the amount of memory marked by mmaaddvviissee(2) MMAADDVV__FFRREEEE.

              _A_n_o_n_H_u_g_e_P_a_g_e_s %lu (since Linux 2.6.38)
                     (CCOONNFFIIGG__TTRRAANNSSPPAARREENNTT__HHUUGGEEPPAAGGEE is required.)  Non-file backed huge pages mapped into user-space page tables.

              _S_h_m_e_m_H_u_g_e_P_a_g_e_s %lu (since Linux 4.8)
                     (CCOONNFFIIGG__TTRRAANNSSPPAARREENNTT__HHUUGGEEPPAAGGEE is required.)  Memory used by shared memory (shmem) and ttmmppffss(5) allocated with huge pages

              _S_h_m_e_m_P_m_d_M_a_p_p_e_d %lu (since Linux 4.8)
                     (CCOONNFFIIGG__TTRRAANNSSPPAARREENNTT__HHUUGGEEPPAAGGEE is required.)  Shared memory mapped into user space with huge pages.

              _C_m_a_T_o_t_a_l %lu (since Linux 3.1)
                     Total CMA (Contiguous Memory Allocator) pages.  (CCOONNFFIIGG__CCMMAA is required.)

              _C_m_a_F_r_e_e %lu (since Linux 3.1)
                     Free CMA (Contiguous Memory Allocator) pages.  (CCOONNFFIIGG__CCMMAA is required.)

              _H_u_g_e_P_a_g_e_s___T_o_t_a_l %lu
                     (CCOONNFFIIGG__HHUUGGEETTLLBB__PPAAGGEE is required.)  The size of the pool of huge pages.

              _H_u_g_e_P_a_g_e_s___F_r_e_e %lu
                     (CCOONNFFIIGG__HHUUGGEETTLLBB__PPAAGGEE is required.)  The number of huge pages in the pool that are not yet allocated.

              _H_u_g_e_P_a_g_e_s___R_s_v_d %lu (since Linux 2.6.17)
                     (CCOONNFFIIGG__HHUUGGEETTLLBB__PPAAGGEE is required.)  This is the number of huge pages for which a commitment to allocate from the pool has been made, but no allocation has yet  been  made.   These
                     reserved huge pages guarantee that an application will be able to allocate a huge page from the pool of huge pages at fault time.

              _H_u_g_e_P_a_g_e_s___S_u_r_p %lu (since Linux 2.6.24)
                     (CCOONNFFIIGG__HHUUGGEETTLLBB__PPAAGGEE  is  required.)   This is the number of huge pages in the pool above the value in _/_p_r_o_c_/_s_y_s_/_v_m_/_n_r___h_u_g_e_p_a_g_e_s.  The maximum number of surplus huge pages is con‐
                     trolled by _/_p_r_o_c_/_s_y_s_/_v_m_/_n_r___o_v_e_r_c_o_m_m_i_t___h_u_g_e_p_a_g_e_s.

              _H_u_g_e_p_a_g_e_s_i_z_e %lu
                     (CCOONNFFIIGG__HHUUGGEETTLLBB__PPAAGGEE is required.)  The size of huge pages.

              _D_i_r_e_c_t_M_a_p_4_k %lu (since Linux 2.6.27)
                     Number of bytes of RAM linearly mapped by kernel in 4kB pages.  (x86.)

              _D_i_r_e_c_t_M_a_p_4_M %lu (since Linux 2.6.27)
                     Number of bytes of RAM linearly mapped by kernel in 4MB pages.  (x86 with CCOONNFFIIGG__XX8866__6644 or CCOONNFFIIGG__XX8866__PPAAEE enabled.)

              _D_i_r_e_c_t_M_a_p_2_M %lu (since Linux 2.6.27)
                     Number of bytes of RAM linearly mapped by kernel in 2MB pages.  (x86 with neither CCOONNFFIIGG__XX8866__6644 nor CCOONNFFIIGG__XX8866__PPAAEE enabled.)

              _D_i_r_e_c_t_M_a_p_1_G %lu (since Linux 2.6.27)
                     (x86 with CCOONNFFIIGG__XX8866__6644 and CCOONNFFIIGG__XX8866__DDIIRREECCTT__GGBBPPAAGGEESS enabled.)

       _/_p_r_o_c_/_m_o_d_u_l_e_s
              A text list of the modules that have been loaded by the system.  See also llssmmoodd(8).

       _/_p_r_o_c_/_m_o_u_n_t_s
              Before kernel 2.4.19, this file was a list of all the filesystems currently mounted on the system.  With the introduction of per-process mount namespaces in Linux 2.4.19 (see mmoouunntt__nnaammee‐‐
              ssppaacceess(7)), this file became a link to _/_p_r_o_c_/_s_e_l_f_/_m_o_u_n_t_s, which lists the mount points of the process's own mount namespace.  The format of this file is documented in ffssttaabb(5).

       _/_p_r_o_c_/_m_t_r_r
              Memory Type Range Registers.  See the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_x_8_6_/_m_t_r_r_._t_x_t (or _D_o_c_u_m_e_n_t_a_t_i_o_n_/_m_t_r_r_._t_x_t before Linux 2.6.28) for details.

       _/_p_r_o_c_/_n_e_t
              This  directory contains various files and subdirectories containing information about the networking layer.  The files contain ASCII structures and are, therefore, readable with ccaatt(1).
              However, the standard nneettssttaatt(8) suite provides much cleaner access to these files.

              With the advent of network namespaces, various information relating to the network stack is virtualized (see nneettwwoorrkk__nnaammeessppaacceess(7)).  Thus, since Linux 2.6.25, _/_p_r_o_c_/_n_e_t  is  a  symbolic
              link  to  the  directory _/_p_r_o_c_/_s_e_l_f_/_n_e_t, which contains the same files and directories as listed below.  However, these files and directories now expose information for the network name‐
              space of which the process is a member.

       _/_p_r_o_c_/_n_e_t_/_a_r_p
              This holds an ASCII readable dump of the kernel ARP table used for address resolutions.  It will show both dynamically learned and preprogrammed ARP entries.  The format is:

       IP address     HW type   Flags     HW address          Mask   Device
       192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
       192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0

              Here "IP address" is the IPv4 address of the machine and the "HW type" is the hardware type of the address from RFC 826.  The flags are the internal flags of the ARP  structure  (as  de‐
              fined in _/_u_s_r_/_i_n_c_l_u_d_e_/_l_i_n_u_x_/_i_f___a_r_p_._h) and the "HW address" is the data link layer mapping for that IP address if it is known.

       _/_p_r_o_c_/_n_e_t_/_d_e_v
              The  dev  pseudo-file  contains  network  device  status information.  This gives the number of received and sent packets, the number of errors and collisions and other basic statistics.
              These are used by the iiffccoonnffiigg(8) program to report device status.  The format is:

 Inter-|   Receive                                                |  Transmit
  face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
     lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
   eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
   ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
   tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0

       _/_p_r_o_c_/_n_e_t_/_d_e_v___m_c_a_s_t
              Defined in _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_n_e_t_/_c_o_r_e_/_d_e_v___m_c_a_s_t_._c:

                  indx interface_name  dmi_u dmi_g dmi_address
                  2    eth0            1     0     01005e000001
                  3    eth1            1     0     01005e000001
                  4    eth2            1     0     01005e000001

       _/_p_r_o_c_/_n_e_t_/_i_g_m_p
              Internet Group Management Protocol.  Defined in _/_u_s_r_/_s_r_c_/_l_i_n_u_x_/_n_e_t_/_c_o_r_e_/_i_g_m_p_._c.

       _/_p_r_o_c_/_n_e_t_/_r_a_r_p
              This file uses the same format as the _a_r_p file and contains the current reverse mapping database used to provide rraarrpp(8) reverse address lookup services.  If RARP is not configured  into
              the kernel, this file will not be present.

       _/_p_r_o_c_/_n_e_t_/_r_a_w
              Holds  a dump of the RAW socket table.  Much of the information is not of use apart from debugging.  The "sl" value is the kernel hash slot for the socket, the "local_address" is the lo‐
              cal address and protocol number pair.  "St" is the internal status of the socket.  The "tx_queue" and "rx_queue" are the outgoing and incoming data queue in terms of kernel memory usage.
              The "tr", "tm->when", and "rexmits" fields are not used by RAW.  The "uid" field holds the effective UID of the creator of the socket.

       _/_p_r_o_c_/_n_e_t_/_s_n_m_p
              This file holds the ASCII data needed for the IP, ICMP, TCP, and UDP management information bases for an SNMP agent.

       _/_p_r_o_c_/_n_e_t_/_t_c_p
              Holds  a dump of the TCP socket table.  Much of the information is not of use apart from debugging.  The "sl" value is the kernel hash slot for the socket, the "local_address" is the lo‐
              cal address and port number pair.  The "rem_address" is the remote address and port number pair (if connected).  "St" is the internal status of the socket.  The "tx_queue" and "rx_queue"
              are  the outgoing and incoming data queue in terms of kernel memory usage.  The "tr", "tm->when", and "rexmits" fields hold internal information of the kernel socket state and are useful
              only for debugging.  The "uid" field holds the effective UID of the creator of the socket.

       _/_p_r_o_c_/_n_e_t_/_u_d_p
              Holds a dump of the UDP socket table.  Much of the information is not of use apart from debugging.  The "sl" value is the kernel hash slot for the socket, the "local_address" is the  lo‐
              cal address and port number pair.  The "rem_address" is the remote address and port number pair (if connected).  "St" is the internal status of the socket.  The "tx_queue" and "rx_queue"
              are the outgoing and incoming data queue in terms of kernel memory usage.  The "tr", "tm->when", and "rexmits" fields are not used by UDP.  The "uid" field holds the effective UID of the
              creator of the socket.  The format is:

 sl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm->when uid
  1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
  1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
  1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0

       _/_p_r_o_c_/_n_e_t_/_u_n_i_x
              Lists the UNIX domain sockets present within the system and their status.  The format is:

 Num RefCount Protocol Flags    Type St Inode Path
  0: 00000002 00000000 00000000 0001 03    42
  1: 00000001 00000000 00010000 0001 01  1948 /dev/printer

              The fields are as follows:

              _N_u_m:      the kernel table slot number.

              _R_e_f_C_o_u_n_t: the number of users of the socket.

              _P_r_o_t_o_c_o_l: currently always 0.

              _F_l_a_g_s:    the internal kernel flags holding the status of the socket.

              _T_y_p_e:     the socket type.  For SSOOCCKK__SSTTRREEAAMM sockets, this is 0001; for SSOOCCKK__DDGGRRAAMM sockets, it is 0002; and for SSOOCCKK__SSEEQQPPAACCKKEETT sockets, it is 0005.

              _S_t:       the internal state of the socket.

              _I_n_o_d_e:    the inode number of the socket.

              _P_a_t_h:     the bound pathname (if any) of the socket.  Sockets in the abstract namespace are included in the list, and are shown with a _P_a_t_h that commences with the character '@'.

       _/_p_r_o_c_/_n_e_t_/_n_e_t_f_i_l_t_e_r_/_n_f_n_e_t_l_i_n_k___q_u_e_u_e
              This file contains information about netfilter user-space queueing, if used.  Each line represents a queue.  Queues that have not been subscribed to by user space are not shown.

                     1   4207     0  2 65535     0     0        0  1
                    (1)   (2)    (3)(4)  (5)    (6)   (7)      (8)

              The fields in each line are:

              (1)  The  ID  of the queue.  This matches what is specified in the ----qquueeuuee--nnuumm or ----qquueeuuee--bbaallaannccee options to the iippttaabblleess(8) NFQUEUE target.  See iippttaabblleess--eexxtteennssiioonnss(8) for more informa‐
                   tion.

              (2)  The netlink port ID subscribed to the queue.

              (3)  The number of packets currently queued and waiting to be processed by the application.

              (4)  The copy mode of the queue.  It is either 1 (metadata only) or 2 (also copy payload data to user space).

              (5)  Copy range; that is, how many bytes of packet payload should be copied to user space at most.

              (6)  queue dropped.  Number of packets that had to be dropped by the kernel because too many packets are already waiting for user space to send back the mandatory accept/drop verdicts.

              (7)  queue user dropped.  Number of packets that were dropped within the netlink subsystem.  Such drops usually happen when the corresponding socket buffer is full; that is,  user  space
                   is not able to read messages fast enough.

              (8)  sequence number.  Every queued packet is associated with a (32-bit) monotonically-increasing sequence number.  This shows the ID of the most recent packet queued.

              The last number exists only for compatibility reasons and is always 1.

       _/_p_r_o_c_/_p_a_r_t_i_t_i_o_n_s
              Contains the major and minor numbers of each partition as well as the number of 1024-byte blocks and the partition name.

       _/_p_r_o_c_/_p_c_i
              This is a listing of all PCI devices found during kernel initialization and their configuration.

              This  file has been deprecated in favor of a new _/_p_r_o_c interface for PCI (_/_p_r_o_c_/_b_u_s_/_p_c_i).  It became optional in Linux 2.2 (available with CCOONNFFIIGG__PPCCII__OOLLDD__PPRROOCC set at kernel compilation).
              It became once more nonoptionally enabled in Linux 2.4.  Next, it was deprecated in Linux 2.6 (still available with CCOONNFFIIGG__PPCCII__LLEEGGAACCYY__PPRROOCC set),  and  finally  removed  altogether  since
              Linux 2.6.17.

       _/_p_r_o_c_/_p_r_o_f_i_l_e (since Linux 2.4)
              This file is present only if the kernel was booted with the _p_r_o_f_i_l_e_=_1 command-line option.  It exposes kernel profiling information in a binary format for use by rreeaaddpprrooffiillee(1).  Writing
              (e.g., an empty string) to this file resets the profiling counters; on some architectures, writing a binary integer "profiling multiplier" of size _s_i_z_e_o_f_(_i_n_t_) sets the  profiling  inter‐
              rupt frequency.

       _/_p_r_o_c_/_s_c_s_i
              A  directory  with  the  _s_c_s_i mid-level pseudo-file and various SCSI low-level driver directories, which contain a file for each SCSI host in this system, all of which give the status of
              some part of the SCSI IO subsystem.  These files contain ASCII structures and are, therefore, readable with ccaatt(1).

              You can also write to some of the files to reconfigure the subsystem or switch certain features on or off.

       _/_p_r_o_c_/_s_c_s_i_/_s_c_s_i
              This is a listing of all SCSI devices known to the kernel.  The listing is similar to the one seen during bootup.  scsi currently supports only the _a_d_d_-_s_i_n_g_l_e_-_d_e_v_i_c_e command which allows
              root to add a hotplugged device to the list of known devices.

              The command

                  echo 'scsi add-single-device 1 0 5 0' > /proc/scsi/scsi

              will cause host scsi1 to scan on SCSI channel 0 for a device on ID 5 LUN 0.  If there is already a device known on this address or the address is invalid, an error will be returned.

       _/_p_r_o_c_/_s_c_s_i_/_[_d_r_i_v_e_r_n_a_m_e_]
              _[_d_r_i_v_e_r_n_a_m_e_] can currently be NCR53c7xx, aha152x, aha1542, aha1740, aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000, pas16, qlogic, scsi_debug, seagate, t128, u15-24f, ultrastore,
              or wd7000.  These directories show up for all drivers that registered at least one SCSI HBA.  Every directory contains one file per registered host.  Every host-file is named  after  the
              number the host was assigned during initialization.

              Reading these files will usually show driver and host configuration, statistics, and so on.

              Writing  to  these files allows different things on different hosts.  For example, with the _l_a_t_e_n_c_y and _n_o_l_a_t_e_n_c_y commands, root can switch on and off command latency measurement code in
              the eata_dma driver.  With the _l_o_c_k_u_p and _u_n_l_o_c_k commands, root can control bus lockups simulated by the scsi_debug driver.

       _/_p_r_o_c_/_s_e_l_f
              This directory refers to the process accessing the _/_p_r_o_c filesystem, and is identical to the _/_p_r_o_c directory named by the process ID of the same process.

       _/_p_r_o_c_/_s_l_a_b_i_n_f_o
              Information about kernel caches.  See ssllaabbiinnffoo(5) for details.

       _/_p_r_o_c_/_s_t_a_t
              kernel/system statistics.  Varies with architecture.  Common entries include:

              _c_p_u _1_0_1_3_2_1_5_3 _2_9_0_6_9_6 _3_0_8_4_7_1_9 _4_6_8_2_8_4_8_3 _1_6_6_8_3 _0 _2_5_1_9_5 _0 _1_7_5_6_2_8 _0
              _c_p_u_0 _1_3_9_3_2_8_0 _3_2_9_6_6 _5_7_2_0_5_6 _1_3_3_4_3_2_9_2 _6_1_3_0 _0 _1_7_8_7_5 _0 _2_3_9_3_3 _0
                     The amount of time, measured in units of USER_HZ (1/100ths of a second on most architectures, use _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_) to obtain the right value), that the system ("cpu" line)  or
                     the specific CPU ("cpu_N" line) spent in various states:

                     _u_s_e_r   (1) Time spent in user mode.

                     _n_i_c_e   (2) Time spent in user mode with low priority (nice).

                     _s_y_s_t_e_m (3) Time spent in system mode.

                     _i_d_l_e   (4) Time spent in the idle task.  This value should be USER_HZ times the second entry in the _/_p_r_o_c_/_u_p_t_i_m_e pseudo-file.

                     _i_o_w_a_i_t (since Linux 2.5.41)
                            (5) Time waiting for I/O to complete.  This value is not reliable, for the following reasons:

                            1. The  CPU will not wait for I/O to complete; iowait is the time that a task is waiting for I/O to complete.  When a CPU goes into idle state for outstanding task I/O, an‐
                               other task will be scheduled on this CPU.

                            2. On a multi-core CPU, the task waiting for I/O to complete is not running on any CPU, so the iowait of each CPU is difficult to calculate.

                            3. The value in this field may _d_e_c_r_e_a_s_e in certain conditions.

                     _i_r_q (since Linux 2.6.0)
                            (6) Time servicing interrupts.

                     _s_o_f_t_i_r_q (since Linux 2.6.0
                            (7) Time servicing softirqs.

                     _s_t_e_a_l (since Linux 2.6.11)
                            (8) Stolen time, which is the time spent in other operating systems when running in a virtualized environment

                     _g_u_e_s_t (since Linux 2.6.24)
                            (9) Time spent running a virtual CPU for guest operating systems under the control of the Linux kernel.

                     _g_u_e_s_t___n_i_c_e (since Linux 2.6.33)
                            (10) Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel).

              _p_a_g_e _5_7_4_1 _1_8_0_8
                     The number of pages the system paged in and the number that were paged out (from disk).

              _s_w_a_p _1 _0
                     The number of swap pages that have been brought in and out.

              _i_n_t_r _1_4_6_2_8_9_8
                     This line shows counts of interrupts serviced since boot time, for each of the possible system interrupts.  The first column is the total of all interrupts serviced including  un‐
                     numbered  architecture  specific interrupts; each subsequent column is the total for that particular numbered interrupt.  Unnumbered interrupts are not shown, only summed into the
                     total.

              _d_i_s_k___i_o_: _(_2_,_0_)_:_(_3_1_,_3_0_,_5_7_6_4_,_1_,_2_) _(_3_,_0_)_:...
                     (major,disk_idx):(noinfo, read_io_ops, blks_read, write_io_ops, blks_written)
                     (Linux 2.4 only)

              _c_t_x_t _1_1_5_3_1_5
                     The number of context switches that the system underwent.

              _b_t_i_m_e _7_6_9_0_4_1_6_0_1
                     boot time, in seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).

              _p_r_o_c_e_s_s_e_s _8_6_0_3_1
                     Number of forks since boot.

              _p_r_o_c_s___r_u_n_n_i_n_g _6
                     Number of processes in runnable state.  (Linux 2.5.45 onward.)

              _p_r_o_c_s___b_l_o_c_k_e_d _2
                     Number of processes blocked waiting for I/O to complete.  (Linux 2.5.45 onward.)

              _s_o_f_t_i_r_q _2_2_9_2_4_5_8_8_9 _9_4 _6_0_0_0_1_5_8_4 _1_3_6_1_9 _5_1_7_5_7_0_4 _2_4_7_1_3_0_4 _2_8 _5_1_2_1_2_7_4_1 _5_9_1_3_0_1_4_3 _0 _5_1_2_4_0_6_7_2
                     This line shows the number of softirq for all CPUs.  The first column is the total of all softirqs and each subsequent column is the total for particular softirq.   (Linux  2.6.31
                     onward.)

       _/_p_r_o_c_/_s_w_a_p_s
              Swap areas in use.  See also sswwaappoonn(8).

       _/_p_r_o_c_/_s_y_s
              This directory (present since 1.3.57) contains a number of files and subdirectories corresponding to kernel variables.  These variables can be read and sometimes modified using the _/_p_r_o_c
              filesystem, and the (deprecated) ssyyssccttll(2) system call.

              String values may be terminated by either '\0' or '\n'.

              Integer and long values may be written either in decimal or in hexadecimal notation (e.g. 0x3FFF).  When writing multiple integer or long values, these may be separated  by  any  of  the
              following whitespace characters: ' ', '\t', or '\n'.  Using other separators leads to the error EEIINNVVAALL.

       _/_p_r_o_c_/_s_y_s_/_a_b_i (since Linux 2.4.10)
              This directory may contain files with application binary information.  See the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_c_t_l_/_a_b_i_._t_x_t for more information.

       _/_p_r_o_c_/_s_y_s_/_d_e_b_u_g
              This directory may be empty.

       _/_p_r_o_c_/_s_y_s_/_d_e_v
              This directory contains device-specific information (e.g., _d_e_v_/_c_d_r_o_m_/_i_n_f_o).  On some systems, it may be empty.

       _/_p_r_o_c_/_s_y_s_/_f_s
              This directory contains the files and subdirectories for kernel variables related to filesystems.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_b_i_n_f_m_t___m_i_s_c
              Documentation for files in this directory can be found in the Linux kernel source in the file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_b_i_n_f_m_t_-_m_i_s_c_._r_s_t (or in _D_o_c_u_m_e_n_t_a_t_i_o_n_/_b_i_n_f_m_t___m_i_s_c_._t_x_t on older ker‐
              nels).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_e_n_t_r_y_-_s_t_a_t_e (since Linux 2.2)
              This file contains information about the status of the directory cache (dcache).  The file contains six numbers, _n_r___d_e_n_t_r_y, _n_r___u_n_u_s_e_d, _a_g_e___l_i_m_i_t (age in seconds), _w_a_n_t___p_a_g_e_s  (pages  re‐
              quested by system) and two dummy values.

              * _n_r___d_e_n_t_r_y is the number of allocated dentries (dcache entries).  This field is unused in Linux 2.2.

              * _n_r___u_n_u_s_e_d is the number of unused dentries.

              * _a_g_e___l_i_m_i_t is the age in seconds after which dcache entries can be reclaimed when memory is short.

              * _w_a_n_t___p_a_g_e_s is nonzero when the kernel has called shrink_dcache_pages() and the dcache isn't pruned yet.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_i_r_-_n_o_t_i_f_y_-_e_n_a_b_l_e
              This file can be used to disable or enable the _d_n_o_t_i_f_y interface described in ffccnnttll(2) on a system-wide basis.  A value of 0 in this file disables the interface, and a value of 1 enables
              it.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_q_u_o_t_-_m_a_x
              This file shows the maximum number of cached disk quota entries.  On some (2.4) systems, it is not present.  If the number of free cached disk quota entries is very low and you have some
              awesome number of simultaneous system users, you might want to raise the limit.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_d_q_u_o_t_-_n_r
              This file shows the number of allocated disk quota entries and the number of free disk quota entries.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_e_p_o_l_l (since Linux 2.6.28)
              This directory contains the file _m_a_x___u_s_e_r___w_a_t_c_h_e_s, which can be used to limit the amount of kernel memory consumed by the _e_p_o_l_l interface.  For further details, see eeppoollll(7).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_m_a_x
              This  file  defines  a  system-wide limit on the number of open files for all processes.  System calls that fail when encountering this limit fail with the error EENNFFIILLEE.  (See also sseettrr‐‐
              lliimmiitt(2), which can be used by a process to set the per-process limit, RRLLIIMMIITT__NNOOFFIILLEE, on the number of files it may open.)  If you get lots of error messages in the kernel log about run‐
              ning out of file handles (look for "VFS: file-max limit <number> reached"), try increasing this value:

                  echo 100000 > /proc/sys/fs/file-max

              Privileged processes (CCAAPP__SSYYSS__AADDMMIINN) can override the _f_i_l_e_-_m_a_x limit.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_n_r
              This  (read-only)  file contains three numbers: the number of allocated file handles (i.e., the number of files presently opened); the number of free file handles; and the maximum number
              of file handles (i.e., the same value as _/_p_r_o_c_/_s_y_s_/_f_s_/_f_i_l_e_-_m_a_x).  If the number of allocated file handles is close to the maximum, you should consider  increasing  the  maximum.   Before
              Linux  2.6,  the  kernel  allocated  file handles dynamically, but it didn't free them again.  Instead the free file handles were kept in a list for reallocation; the "free file handles"
              value indicates the size of that list.  A large number of free file handles indicates that there was a past peak in the usage of open file handles.  Since Linux 2.6, the kernel does  de‐
              allocate freed file handles, and the "free file handles" value is always zero.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_m_a_x (only present until Linux 2.2)
              This  file  contains the maximum number of in-memory inodes.  This value should be 3–4 times larger than the value in _f_i_l_e_-_m_a_x, since _s_t_d_i_n, _s_t_d_o_u_t and network sockets also need an inode
              to handle them.  When you regularly run out of inodes, you need to increase this value.

              Starting with Linux 2.4, there is no longer a static limit on the number of inodes, and this file is removed.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_n_r
              This file contains the first two values from _i_n_o_d_e_-_s_t_a_t_e.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_d_e_-_s_t_a_t_e
              This file contains seven numbers: _n_r___i_n_o_d_e_s, _n_r___f_r_e_e___i_n_o_d_e_s, _p_r_e_s_h_r_i_n_k, and four dummy values (always zero).

              _n_r___i_n_o_d_e_s is the number of inodes the system has allocated.  _n_r___f_r_e_e___i_n_o_d_e_s represents the number of free inodes.

              _p_r_e_s_h_r_i_n_k is nonzero when the _n_r___i_n_o_d_e_s > _i_n_o_d_e_-_m_a_x and the system needs to prune the inode list instead of allocating more; since Linux 2.4, this field is a dummy value (always zero).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_i_n_o_t_i_f_y (since Linux 2.6.13)
              This directory contains files _m_a_x___q_u_e_u_e_d___e_v_e_n_t_s, _m_a_x___u_s_e_r___i_n_s_t_a_n_c_e_s, and _m_a_x___u_s_e_r___w_a_t_c_h_e_s, that can be used to limit the amount of kernel memory consumed by the _i_n_o_t_i_f_y  interface.   For
              further details, see iinnoottiiffyy(7).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_l_e_a_s_e_-_b_r_e_a_k_-_t_i_m_e
              This  file  specifies the grace period that the kernel grants to a process holding a file lease (ffccnnttll(2)) after it has sent a signal to that process notifying it that another process is
              waiting to open the file.  If the lease holder does not remove or downgrade the lease within this grace period, the kernel forcibly breaks the lease.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_l_e_a_s_e_s_-_e_n_a_b_l_e
              This file can be used to enable or disable file leases (ffccnnttll(2)) on a system-wide basis.  If this file contains the value 0, leases are disabled.  A nonzero value enables leases.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_m_o_u_n_t_-_m_a_x (since Linux 4.9)
              The value in this file specifies the maximum number of mounts that may exist in a mount namespace.  The default value in this file is 100,000.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_m_q_u_e_u_e (since Linux 2.6.6)
              This directory contains files _m_s_g___m_a_x, _m_s_g_s_i_z_e___m_a_x, and _q_u_e_u_e_s___m_a_x, controlling the resources used by POSIX message queues.  See mmqq__oovveerrvviieeww(7) for details.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_n_r___o_p_e_n (since Linux 2.6.25)
              This file imposes ceiling on the value to which the RRLLIIMMIITT__NNOOFFIILLEE resource limit can be raised (see ggeettrrlliimmiitt(2)).  This ceiling is enforced for both unprivileged and privileged process.
              The default value in this file is 1048576.  (Before Linux 2.6.25, the ceiling for RRLLIIMMIITT__NNOOFFIILLEE was hard-coded to the same value.)

       _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_g_i_d and _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_u_i_d
              These  files  allow  you  to change the value of the fixed UID and GID.  The default is 65534.  Some filesystems support only 16-bit UIDs and GIDs, although in Linux UIDs and GIDs are 32
              bits.  When one of these filesystems is mounted with writes enabled, any UID or GID that would exceed 65535 is translated to the overflow value before being written to disk.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_p_i_p_e_-_m_a_x_-_s_i_z_e (since Linux 2.6.35)
              See ppiippee(7).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_p_i_p_e_-_u_s_e_r_-_p_a_g_e_s_-_h_a_r_d (since Linux 4.5)
              See ppiippee(7).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_p_i_p_e_-_u_s_e_r_-_p_a_g_e_s_-_s_o_f_t (since Linux 4.5)
              See ppiippee(7).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_p_r_o_t_e_c_t_e_d___h_a_r_d_l_i_n_k_s (since Linux 3.6)
              When the value in this file is 0, no restrictions are placed on the creation of hard links (i.e., this is the historical behavior before Linux 3.6).  When the value in this file is 1,  a
              hard link can be created to a target file only if one of the following conditions is true:

              *  The calling process has the CCAAPP__FFOOWWNNEERR capability in its user namespace and the file UID has a mapping in the namespace.

              *  The  filesystem UID of the process creating the link matches the owner (UID) of the target file (as described in ccrreeddeennttiiaallss(7), a process's filesystem UID is normally the same as its
                 effective UID).

              *  All of the following conditions are true:

                  •  the target is a regular file;

                  •  the target file does not have its set-user-ID mode bit enabled;

                  •  the target file does not have both its set-group-ID and group-executable mode bits enabled; and

                  •  the caller has permission to read and write the target file (either via the file's permissions mask or because it has suitable capabilities).

              The default value in this file is 0.  Setting the value to 1 prevents a longstanding class of security issues caused by hard-link-based time-of-check, time-of-use  races,  most  commonly
              seen  in  world-writable directories such as _/_t_m_p.  The common method of exploiting this flaw is to cross privilege boundaries when following a given hard link (i.e., a root process fol‐
              lows a hard link created by another user).  Additionally, on systems without separated partitions, this stops unauthorized users from "pinning" vulnerable  set-user-ID  and  set-group-ID
              files against being upgraded by the administrator, or linking to special files.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_p_r_o_t_e_c_t_e_d___s_y_m_l_i_n_k_s (since Linux 3.6)
              When the value in this file is 0, no restrictions are placed on following symbolic links (i.e., this is the historical behavior before Linux 3.6).  When the value in this file is 1, sym‐
              bolic links are followed only in the following circumstances:

              *  the filesystem UID of the process following the link matches the owner (UID) of the symbolic link (as described in ccrreeddeennttiiaallss(7), a process's filesystem UID is normally the  same  as
                 its effective UID);

              *  the link is not in a sticky world-writable directory; or

              *  the symbolic link and its parent directory have the same owner (UID)

              A system call that fails to follow a symbolic link because of the above restrictions returns the error EEAACCCCEESS in _e_r_r_n_o.

              The default value in this file is 0.  Setting the value to 1 avoids a longstanding class of security issues based on time-of-check, time-of-use races when accessing symbolic links.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_i_d___d_u_m_p_a_b_l_e (since Linux 2.6.13)
              The  value  in  this file is assigned to a process's "dumpable" flag in the circumstances described in pprrccttll(2).  In effect, the value in this file determines whether core dump files are
              produced for set-user-ID or otherwise protected/tainted binaries.  The "dumpable" setting also affects the ownership of files in a process's _/_p_r_o_c_/_[_p_i_d_] directory, as described above.

              Three different integer values can be specified:

              _0 _(_d_e_f_a_u_l_t_)
                     This provides the traditional (pre-Linux 2.6.13) behavior.  A core dump will not be produced for a process which has changed credentials (by calling sseetteeuuiidd(2), sseettggiidd(2), or sim‐
                     ilar, or by executing a set-user-ID or set-group-ID program) or whose binary does not have read permission enabled.

              _1 _(_"_d_e_b_u_g_"_)
                     All processes dump core when possible.  (Reasons why a process might nevertheless not dump core are described in ccoorree(5).)  The core dump is owned by the filesystem user ID of the
                     dumping process and no security is applied.  This is intended for system debugging situations only: this mode is insecure because it allows unprivileged users to examine the  mem‐
                     ory contents of privileged processes.

              _2 _(_"_s_u_i_d_s_a_f_e_"_)
                     Any binary which normally would not be dumped (see "0" above) is dumped readable by root only.  This allows the user to remove the core dump file but not to read it.  For security
                     reasons core dumps in this mode will not overwrite one another or other files.  This mode is appropriate when administrators are attempting to debug problems in a normal  environ‐
                     ment.

                     Additionally, since Linux 3.6, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___p_a_t_t_e_r_n must either be an absolute pathname or a pipe command, as detailed in ccoorree(5).  Warnings will be written to the kernel
                     log if _c_o_r_e___p_a_t_t_e_r_n does not follow these rules, and no core dump will be produced.

              For details of the effect of a process's "dumpable" setting on ptrace access mode checking, see ppttrraaccee(2).

       _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_p_e_r_-_m_a_x
              This file controls the maximum number of superblocks, and thus the maximum number of mounted filesystems the kernel can have.  You need increase only _s_u_p_e_r_-_m_a_x if you need to mount  more
              filesystems than the current value in _s_u_p_e_r_-_m_a_x allows you to.

       _/_p_r_o_c_/_s_y_s_/_f_s_/_s_u_p_e_r_-_n_r
              This file contains the number of filesystems currently mounted.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l
              This directory contains files controlling a range of kernel parameters, as described below.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_a_c_c_t
              This  file  contains three numbers: _h_i_g_h_w_a_t_e_r, _l_o_w_w_a_t_e_r, and _f_r_e_q_u_e_n_c_y.  If BSD-style process accounting is enabled, these values control its behavior.  If free space on filesystem where
              the log lives goes below _l_o_w_w_a_t_e_r percent, accounting suspends.  If free space gets above _h_i_g_h_w_a_t_e_r percent, accounting resumes.  _f_r_e_q_u_e_n_c_y determines how often  the  kernel  checks  the
              amount of free space (value is in seconds).  Default values are 4, 2 and 30.  That is, suspend accounting if 2% or less space is free; resume it if 4% or more space is free; consider in‐
              formation about amount of free space valid for 30 seconds.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_a_u_t_o___m_s_g_m_n_i (Linux 2.6.27 to 3.18)
              From Linux 2.6.27 to 3.18, this file was used to control recomputing of the value in _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_i upon the addition or removal of memory or  upon  IPC  namespace  creation/re‐
              moval.   Echoing  "1" into this file enabled _m_s_g_m_n_i automatic recomputing (and triggered a recomputation of _m_s_g_m_n_i based on the current amount of available memory and number of IPC name‐
              spaces).  Echoing "0" disabled automatic recomputing.  (Automatic recomputing was also disabled if a value was explicitly assigned to  _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_i.)   The  default  value  in
              _a_u_t_o___m_s_g_m_n_i was 1.

              Since Linux 3.19, the content of this file has no effect (because _m_s_g_m_n_i defaults to near the maximum value possible), and reads from this file always return the value "0".

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_a_p___l_a_s_t___c_a_p (since Linux 3.2)
              See ccaappaabbiilliittiieess(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_a_p_-_b_o_u_n_d (from Linux 2.2 to 2.6.24)
              This  file  holds  the  value  of the kernel _c_a_p_a_b_i_l_i_t_y _b_o_u_n_d_i_n_g _s_e_t (expressed as a signed decimal number).  This set is ANDed against the capabilities permitted to a process during eexx‐‐
              eeccvvee(2).  Starting with Linux 2.6.25, the system-wide capability bounding set disappeared, and was replaced by a per-thread bounding set; see ccaappaabbiilliittiieess(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___p_a_t_t_e_r_n
              See ccoorree(5).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___p_i_p_e___l_i_m_i_t
              See ccoorree(5).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_o_r_e___u_s_e_s___p_i_d
              See ccoorree(5).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_c_t_r_l_-_a_l_t_-_d_e_l
              This file controls the handling of Ctrl-Alt-Del from the keyboard.  When the value in this file is 0, Ctrl-Alt-Del is trapped and sent  to  the  iinniitt(1)  program  to  handle  a  graceful
              restart.   When  the  value is greater than zero, Linux's reaction to a Vulcan Nerve Pinch (tm) will be an immediate reboot, without even syncing its dirty buffers.  Note: when a program
              (like dosemu) has the keyboard in "raw" mode, the ctrl-alt-del is intercepted by the program before it ever reaches the kernel tty layer, and it's up to the program to decide what to  do
              with it.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_d_m_e_s_g___r_e_s_t_r_i_c_t (since Linux 2.6.37)
              The  value  in  this file determines who can see kernel syslog contents.  A value of 0 in this file imposes no restrictions.  If the value is 1, only privileged users can read the kernel
              syslog.  (See ssyysslloogg(2) for more details.)  Since Linux 3.4, only users with the CCAAPP__SSYYSS__AADDMMIINN capability may change the value in this file.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_d_o_m_a_i_n_n_a_m_e and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_o_s_t_n_a_m_e
              can be used to set the NIS/YP domainname and the hostname of your box in exactly the same way as the commands ddoommaaiinnnnaammee(1) and hhoossttnnaammee(1), that is:

                  # eecchhoo ''ddaarrkkssttaarr'' >> //pprroocc//ssyyss//kkeerrnneell//hhoossttnnaammee
                  # eecchhoo ''mmyyddoommaaiinn'' >> //pprroocc//ssyyss//kkeerrnneell//ddoommaaiinnnnaammee

              has the same effect as

                  # hhoossttnnaammee ''ddaarrkkssttaarr''
                  # ddoommaaiinnnnaammee ''mmyyddoommaaiinn''

              Note, however, that the classic darkstar.frop.org has the hostname "darkstar" and DNS (Internet Domain Name Server) domainname "frop.org", not to be confused with the NIS (Network Infor‐
              mation Service) or YP (Yellow Pages) domainname.  These two domain names are in general different.  For a detailed discussion see the hhoossttnnaammee(1) man page.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_o_t_p_l_u_g
              This file contains the pathname for the hotplug policy agent.  The default value in this file is _/_s_b_i_n_/_h_o_t_p_l_u_g.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_h_t_a_b_-_r_e_c_l_a_i_m (before Linux 2.4.9.2)
              (PowerPC only) If this file is set to a nonzero value, the PowerPC htab (see kernel file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_p_o_w_e_r_p_c_/_p_p_c___h_t_a_b_._t_x_t) is pruned each time the system hits the idle loop.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_k_e_y_s_/_*
              This directory contains various files that define parameters and limits for the key-management facility.  These files are described in kkeeyyrriinnggss(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_k_p_t_r___r_e_s_t_r_i_c_t (since Linux 2.6.38)
              The  value in this file determines whether kernel addresses are exposed via _/_p_r_o_c files and other interfaces.  A value of 0 in this file imposes no restrictions.  If the value is 1, ker‐
              nel pointers printed using the _%_p_K format specifier will be replaced with zeros unless the user has the CCAAPP__SSYYSSLLOOGG capability.  If the value is 2, kernel pointers printed using  the  _%_p_K
              format  specifier  will  be  replaced  with zeros regardless of the user's capabilities.  The initial default value for this file was 1, but the default was changed to 0 in Linux 2.6.39.
              Since Linux 3.4, only users with the CCAAPP__SSYYSS__AADDMMIINN capability can change the value in this file.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_l_2_c_r
              (PowerPC only) This file contains a flag that controls the L2 cache of G3 processor boards.  If 0, the cache is disabled.  Enabled if nonzero.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_o_d_p_r_o_b_e
              This file contains the pathname for the kernel module loader.  The default value is _/_s_b_i_n_/_m_o_d_p_r_o_b_e.  The file is present only if the kernel is built with the CCOONNFFIIGG__MMOODDUULLEESS  (CCOONNFFIIGG__KKMMOODD
              in Linux 2.6.26 and earlier) option enabled.  It is described by the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_k_m_o_d_._t_x_t (present only in kernel 2.4 and earlier).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_o_d_u_l_e_s___d_i_s_a_b_l_e_d (since Linux 2.6.31)
              A  toggle  value indicating if modules are allowed to be loaded in an otherwise modular kernel.  This toggle defaults to off (0), but can be set true (1).  Once true, modules can be nei‐
              ther loaded nor unloaded, and the toggle cannot be set back to false.  The file is present only if the kernel is built with the CCOONNFFIIGG__MMOODDUULLEESS option enabled.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_a_x (since Linux 2.2)
              This file defines a system-wide limit specifying the maximum number of bytes in a single message written on a System V message queue.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_i (since Linux 2.4)
              This file defines the system-wide limit on the number of message queue identifiers.  See also _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_a_u_t_o___m_s_g_m_n_i.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_m_s_g_m_n_b (since Linux 2.2)
              This file defines a system-wide parameter used to initialize the _m_s_g___q_b_y_t_e_s setting for subsequently created message queues.  The _m_s_g___q_b_y_t_e_s setting specifies the maximum number of bytes
              that may be written to the message queue.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_n_g_r_o_u_p_s___m_a_x (since Linux 2.6.4)
              This is a read-only file that displays the upper limit on the number of a process's group memberships.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_n_s___l_a_s_t___p_i_d (since Linux 3.3)
              See ppiidd__nnaammeessppaacceess(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_t_y_p_e and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_r_e_l_e_a_s_e
              These files give substrings of _/_p_r_o_c_/_v_e_r_s_i_o_n.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_v_e_r_f_l_o_w_g_i_d and _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_v_e_r_f_l_o_w_u_i_d
              These files duplicate the files _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_g_i_d and _/_p_r_o_c_/_s_y_s_/_f_s_/_o_v_e_r_f_l_o_w_u_i_d.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_a_n_i_c
              This  file gives read/write access to the kernel variable _p_a_n_i_c___t_i_m_e_o_u_t.  If this is zero, the kernel will loop on a panic; if nonzero, it indicates that the kernel should autoreboot af‐
              ter this number of seconds.  When you use the software watchdog device driver, the recommended setting is 60.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_a_n_i_c___o_n___o_o_p_s (since Linux 2.5.68)
              This file controls the kernel's behavior when an oops or BUG is encountered.  If this file contains 0, then the system tries to continue operation.  If it contains 1, then the system de‐
              lays a few seconds (to give klogd time to record the oops output) and then panics.  If the _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_a_n_i_c file is also nonzero, then the machine will be rebooted.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_i_d___m_a_x (since Linux 2.5.34)
              This  file  specifies  the  value at which PIDs wrap around (i.e., the value in this file is one greater than the maximum PID).  PIDs greater than this value are not allocated; thus, the
              value in this file also acts as a system-wide limit on the total number of processes and threads.  The default value for this file, 32768, results in the same range of PIDs as on earlier
              kernels.  On 32-bit platforms, 32768 is the maximum value for _p_i_d___m_a_x.  On 64-bit systems, _p_i_d___m_a_x can be set to any value up to 2^22 (PPIIDD__MMAAXX__LLIIMMIITT, approximately 4 million).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_o_w_e_r_s_a_v_e_-_n_a_p (PowerPC only)
              This file contains a flag.  If set, Linux-PPC will use the "nap" mode of powersaving, otherwise the "doze" mode will be used.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_r_i_n_t_k
              See ssyysslloogg(2).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y (since Linux 2.6.4)
              This directory contains two files relating to the number of UNIX 98 pseudoterminals (see ppttss(4)) on the system.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y_/_m_a_x
              This file defines the maximum number of pseudoterminals.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_t_y_/_n_r
              This read-only file indicates how many pseudoterminals are currently in use.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_a_n_d_o_m
              This directory contains various parameters controlling the operation of the file _/_d_e_v_/_r_a_n_d_o_m.  See rraannddoomm(4) for further information.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_a_n_d_o_m_/_u_u_i_d (since Linux 2.4)
              Each read from this read-only file returns a randomly generated 128-bit UUID, as a string in the standard UUID format.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_a_n_d_o_m_i_z_e___v_a___s_p_a_c_e (since Linux 2.6.12)
              Select the address space layout randomization (ASLR) policy for the system (on architectures that support ASLR).  Three values are supported for this file:

              0  Turn ASLR off.  This is the default for architectures that don't support ASLR, and when the kernel is booted with the _n_o_r_a_n_d_m_a_p_s parameter.

              1  Make  the addresses of mmmmaapp(2) allocations, the stack, and the VDSO page randomized.  Among other things, this means that shared libraries will be loaded at randomized addresses.  The
                 text segment of PIE-linked binaries will also be loaded at a randomized address.  This value is the default if the kernel was configured with CCOONNFFIIGG__CCOOMMPPAATT__BBRRKK.

              2  (Since Linux 2.6.25) Also support heap randomization.  This value is the default if the kernel was not configured with CCOONNFFIIGG__CCOOMMPPAATT__BBRRKK.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_e_a_l_-_r_o_o_t_-_d_e_v
              This file is documented in the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_i_n_i_t_r_d_._r_s_t (or _D_o_c_u_m_e_n_t_a_t_i_o_n_/_i_n_i_t_r_d_._t_x_t before Linux 4.10).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_e_b_o_o_t_-_c_m_d (Sparc only)
              This file seems to be a way to give an argument to the SPARC ROM/Flash boot loader.  Maybe to tell it what to do after rebooting?

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_m_a_x
              (Only in kernels up to and including 2.6.7; see sseettrrlliimmiitt(2)) This file can be used to tune the maximum number of POSIX real-time (queued) signals that can be outstanding in the system.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_n_r
              (Only in kernels up to and including 2.6.7.)  This file shows the number of POSIX real-time signals currently queued.

       _/_p_r_o_c_/_[_p_i_d_]_/_s_c_h_e_d___a_u_t_o_g_r_o_u_p___e_n_a_b_l_e_d (since Linux 2.6.38)
              See sscchheedd(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_c_h_e_d___c_h_i_l_d___r_u_n_s___f_i_r_s_t (since Linux 2.6.23)
              If this file contains the value zero, then, after a ffoorrkk(2), the parent is first scheduled on the CPU.  If the file contains a nonzero value, then the child is  scheduled  first  on  the
              CPU.  (Of course, on a multiprocessor system, the parent and the child might both immediately be scheduled on a CPU.)

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_c_h_e_d___r_r___t_i_m_e_s_l_i_c_e___m_s (since Linux 3.9)
              See sscchheedd__rrrr__ggeett__iinntteerrvvaall(2).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_c_h_e_d___r_t___p_e_r_i_o_d___u_s (since Linux 2.6.25)
              See sscchheedd(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_c_h_e_d___r_t___r_u_n_t_i_m_e___u_s (since Linux 2.6.25)
              See sscchheedd(7).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_e_c_c_o_m_p (since Linux 4.14)
              This directory provides additional seccomp information and configuration.  See sseeccccoommpp(2) for further details.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_e_m (since Linux 2.4)
              This file contains 4 numbers defining limits for System V IPC semaphores.  These fields are, in order:

              SEMMSL  The maximum semaphores per semaphore set.

              SEMMNS  A system-wide limit on the number of semaphores in all semaphore sets.

              SEMOPM  The maximum number of operations that may be specified in a sseemmoopp(2) call.

              SEMMNI  A system-wide limit on the maximum number of semaphore identifiers.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_g_-_b_i_g_-_b_u_f_f
              This  file shows the size of the generic SCSI device (sg) buffer.  You can't tune it just yet, but you could change it at compile time by editing _i_n_c_l_u_d_e_/_s_c_s_i_/_s_g_._h and changing the value
              of SSGG__BBIIGG__BBUUFFFF.  However, there shouldn't be any reason to change this value.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m___r_m_i_d___f_o_r_c_e_d (since Linux 3.1)
              If this file is set to 1, all System V shared memory segments will be marked for destruction as soon as the number of attached processes falls to zero; in other words, it  is  no  longer
              possible to create shared memory segments that exist independently of any attached process.

              The effect is as though a sshhmmccttll(2) IIPPCC__RRMMIIDD is performed on all existing segments as well as all segments created in the future (until this file is reset to 0).  Note that existing seg‐
              ments that are attached to no process will be immediately destroyed when this file is set to 1.  Setting this option will also destroy segments that were  created,  but  never  attached,
              upon termination of the process that created the segment with sshhmmggeett(2).

              Setting this file to 1 provides a way of ensuring that all System V shared memory segments are counted against the resource usage and resource limits (see the description of RRLLIIMMIITT__AASS in
              ggeettrrlliimmiitt(2)) of at least one process.

              Because setting this file to 1 produces behavior that is nonstandard and could also break existing applications, the default value in this file is 0.  Set this file to 1 only if you have
              a good understanding of the semantics of the applications using System V shared memory on your system.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_a_l_l (since Linux 2.2)
              This file contains the system-wide limit on the total number of pages of System V shared memory.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_m_a_x (since Linux 2.2)
              This  file  can  be  used to query and set the run-time limit on the maximum (System V IPC) shared memory segment size that can be created.  Shared memory segments up to 1GB are now sup‐
              ported in the kernel.  This value defaults to SSHHMMMMAAXX.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_h_m_m_n_i (since Linux 2.4)
              This file specifies the system-wide maximum number of System V shared memory segments that can be created.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_y_s_c_t_l___w_r_i_t_e_s___s_t_r_i_c_t (since Linux 3.16)
              The value in this file determines how the file offset affects the behavior of updating entries in files under _/_p_r_o_c_/_s_y_s.  The file has three possible values:

              -1  This provides legacy handling, with no printk warnings.  Each wwrriittee(2) must fully contain the value to be written, and multiple writes on the same file descriptor will overwrite  the
                  entire value, regardless of the file position.

              0   (default) This provides the same behavior as for -1, but printk warnings are written for processes that perform writes when the file offset is not 0.

              1   Respect  the  file offset when writing strings into _/_p_r_o_c_/_s_y_s files.  Multiple writes will _a_p_p_e_n_d to the value buffer.  Anything written beyond the maximum length of the value buffer
                  will be ignored.  Writes to numeric _/_p_r_o_c_/_s_y_s entries must always be at file offset 0 and the value must be fully contained in the buffer provided to wwrriittee(2).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_y_s_r_q
              This file controls the functions allowed to be invoked by the SysRq key.  By default, the file contains 1 meaning that every possible SysRq request is allowed (in older kernel  versions,
              SysRq was disabled by default, and you were required to specifically enable it at run-time, but this is not the case any more).  Possible values in this file are:

              0    Disable sysrq completely

              1    Enable all functions of sysrq

              > 1  Bit mask of allowed sysrq functions, as follows:
                     2  Enable control of console logging level
                     4  Enable control of keyboard (SAK, unraw)
                     8  Enable debugging dumps of processes etc.
                    16  Enable sync command
                    32  Enable remount read-only
                    64  Enable signaling of processes (term, kill, oom-kill)
                   128  Allow reboot/poweroff
                   256  Allow nicing of all real-time tasks

              This  file is present only if the CCOONNFFIIGG__MMAAGGIICC__SSYYSSRRQQ kernel configuration option is enabled.  For further details see the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_s_y_s_r_q_._r_s_t (or
              _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_r_q_._t_x_t before Linux 4.10).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_v_e_r_s_i_o_n
              This file contains a string such as:

                  #5 Wed Feb 25 21:49:24 MET 1998

              The "#5" means that this is the fifth kernel built from this source base and the date following it indicates the time the kernel was built.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_t_h_r_e_a_d_s_-_m_a_x (since Linux 2.3.11)
              This file specifies the system-wide limit on the number of threads (tasks) that can be created on the system.

              Since Linux 4.1, the value that can be written to _t_h_r_e_a_d_s_-_m_a_x is bounded.  The minimum value that can be written is 20.  The maximum value that can be written is given  by  the  constant
              FFUUTTEEXX__TTIIDD__MMAASSKK (0x3fffffff).  If a value outside of this range is written to _t_h_r_e_a_d_s_-_m_a_x, the error EEIINNVVAALL occurs.

              The value written is checked against the available RAM pages.  If the thread structures would occupy too much (more than 1/8th) of the available RAM pages, _t_h_r_e_a_d_s_-_m_a_x is reduced accord‐
              ingly.

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_y_a_m_a_/_p_t_r_a_c_e___s_c_o_p_e (since Linux 3.5)
              See ppttrraaccee(2).

       _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_z_e_r_o_-_p_a_g_e_d (PowerPC only)
              This file contains a flag.  When enabled (nonzero), Linux-PPC will pre-zero pages in the idle loop, possibly speeding up get_free_pages.

       _/_p_r_o_c_/_s_y_s_/_n_e_t
              This directory contains networking stuff.  Explanations for some of the files under this directory can be found in ttccpp(7) and iipp(7).

       _/_p_r_o_c_/_s_y_s_/_n_e_t_/_c_o_r_e_/_b_p_f___j_i_t___e_n_a_b_l_e
              See bbppff(2).

       _/_p_r_o_c_/_s_y_s_/_n_e_t_/_c_o_r_e_/_s_o_m_a_x_c_o_n_n
              This file defines a ceiling value for the _b_a_c_k_l_o_g argument of lliisstteenn(2); see the lliisstteenn(2) manual page for details.

       _/_p_r_o_c_/_s_y_s_/_p_r_o_c
              This directory may be empty.

       _/_p_r_o_c_/_s_y_s_/_s_u_n_r_p_c
              This directory supports Sun remote procedure call for network filesystem (NFS).  On some systems, it is not present.

       _/_p_r_o_c_/_s_y_s_/_u_s_e_r (since Linux 4.9)
              See nnaammeessppaacceess(7).

       _/_p_r_o_c_/_s_y_s_/_v_m
              This directory contains files for memory management tuning, buffer and cache management.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_a_d_m_i_n___r_e_s_e_r_v_e___k_b_y_t_e_s (since Linux 3.10)
              This file defines the amount of free memory (in KiB) on the system that should be reserved for users with the capability CCAAPP__SSYYSS__AADDMMIINN.

              The default value in this file is the minimum of [3% of free pages, 8MiB] expressed as KiB.  The default is intended to provide enough for the superuser to log in and kill a process,  if
              necessary, under the default overcommit 'guess' mode (i.e., 0 in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y).

              Systems  running in "overcommit never" mode (i.e., 2 in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y) should increase the value in this file to account for the full virtual memory size of the programs
              used to recover (e.g., llooggiinn(1) sssshh(1), and ttoopp(1)) Otherwise, the superuser may not be able to log in to recover the system.  For example, on x86-64 a suitable value is  131072  (128MiB
              reserved).

              Changing the value in this file takes effect whenever an application requests memory.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_c_o_m_p_a_c_t___m_e_m_o_r_y (since Linux 2.6.35)
              When  1  is  written  to  this  file,  all zones are compacted such that free memory is available in contiguous blocks where possible.  The effect of this action can be seen by examining
              _/_p_r_o_c_/_b_u_d_d_y_i_n_f_o.

              Present only if the kernel was configured with CCOONNFFIIGG__CCOOMMPPAACCTTIIOONN.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_d_r_o_p___c_a_c_h_e_s (since Linux 2.6.16)
              Writing to this file causes the kernel to drop clean caches, dentries, and inodes from memory, causing that memory to become free.  This can be useful for memory management  testing  and
              performing reproducible filesystem benchmarks.  Because writing to this file causes the benefits of caching to be lost, it can degrade overall system performance.

              To free pagecache, use:

                  echo 1 > /proc/sys/vm/drop_caches

              To free dentries and inodes, use:

                  echo 2 > /proc/sys/vm/drop_caches

              To free pagecache, dentries and inodes, use:

                  echo 3 > /proc/sys/vm/drop_caches

              Because writing to this file is a nondestructive operation and dirty objects are not freeable, the user should run ssyynncc(1) first.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_l_e_g_a_c_y___v_a___l_a_y_o_u_t (since Linux 2.6.9)
              If nonzero, this disables the new 32-bit memory-mapping layout; the kernel will use the legacy (2.4) layout for all processes.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_m_e_m_o_r_y___f_a_i_l_u_r_e___e_a_r_l_y___k_i_l_l (since Linux 2.6.32)
              Control  how  to  kill processes when an uncorrected memory error (typically a 2-bit error in a memory module) that cannot be handled by the kernel is detected in the background by hard‐
              ware.  In some cases (like the page still having a valid copy on disk), the kernel will handle the failure transparently without affecting any applications.  But if there is no other up-
              to-date copy of the data, it will kill processes to prevent any data corruptions from propagating.

              The file has one of the following values:

              1:  Kill  all  processes  that have the corrupted-and-not-reloadable page mapped as soon as the corruption is detected.  Note that this is not supported for a few types of pages, such as
                  kernel internally allocated data or the swap cache, but works for the majority of user pages.

              0:  Unmap the corrupted page from all processes and kill a process only if it tries to access the page.

              The kill is performed using a SSIIGGBBUUSS signal with _s_i___c_o_d_e set to BBUUSS__MMCCEEEERRRR__AAOO.  Processes can handle this if they want to; see ssiiggaaccttiioonn(2) for more details.

              This feature is active only on architectures/platforms with advanced machine check handling and depends on the hardware capabilities.

              Applications can override the _m_e_m_o_r_y___f_a_i_l_u_r_e___e_a_r_l_y___k_i_l_l setting individually with the pprrccttll(2) PPRR__MMCCEE__KKIILLLL operation.

              Present only if the kernel was configured with CCOONNFFIIGG__MMEEMMOORRYY__FFAAIILLUURREE.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_m_e_m_o_r_y___f_a_i_l_u_r_e___r_e_c_o_v_e_r_y (since Linux 2.6.32)
              Enable memory failure recovery (when supported by the platform)

              1:  Attempt recovery.

              0:  Always panic on a memory failure.

              Present only if the kernel was configured with CCOONNFFIIGG__MMEEMMOORRYY__FFAAIILLUURREE.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_o_o_m___d_u_m_p___t_a_s_k_s (since Linux 2.6.25)
              Enables a system-wide task dump (excluding kernel threads) to be produced when the kernel performs an OOM-killing.  The dump includes the following information  for  each  task  (thread,
              process):  thread  ID,  real  user  ID, thread group ID (process ID), virtual memory size, resident set size, the CPU that the task is scheduled on, oom_adj score (see the description of
              _/_p_r_o_c_/_[_p_i_d_]_/_o_o_m___a_d_j), and command name.  This is helpful to determine why the OOM-killer was invoked and to identify the rogue task that caused it.

              If this contains the value zero, this information is suppressed.  On very large systems with thousands of tasks, it may not be feasible to dump the memory state information for each one.
              Such systems should not be forced to incur a performance penalty in OOM situations when the information may not be desired.

              If this is set to nonzero, this information is shown whenever the OOM-killer actually kills a memory-hogging task.

              The default value is 0.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_o_o_m___k_i_l_l___a_l_l_o_c_a_t_i_n_g___t_a_s_k (since Linux 2.6.24)
              This enables or disables killing the OOM-triggering task in out-of-memory situations.

              If  this is set to zero, the OOM-killer will scan through the entire tasklist and select a task based on heuristics to kill.  This normally selects a rogue memory-hogging task that frees
              up a large amount of memory when killed.

              If this is set to nonzero, the OOM-killer simply kills the task that triggered the out-of-memory condition.  This avoids a possibly expensive tasklist scan.

              If _/_p_r_o_c_/_s_y_s_/_v_m_/_p_a_n_i_c___o_n___o_o_m is nonzero, it takes precedence over whatever value is used in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_o_m___k_i_l_l___a_l_l_o_c_a_t_i_n_g___t_a_s_k.

              The default value is 0.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___k_b_y_t_e_s (since Linux 3.14)
              This writable file provides an alternative to _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___r_a_t_i_o for controlling the _C_o_m_m_i_t_L_i_m_i_t when _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y has the value 2.  It allows the amount  of
              memory  overcommitting  to be specified as an absolute value (in kB), rather than as a percentage, as is done with _o_v_e_r_c_o_m_m_i_t___r_a_t_i_o.  This allows for finer-grained control of _C_o_m_m_i_t_L_i_m_i_t
              on systems with extremely large memory sizes.

              Only one of _o_v_e_r_c_o_m_m_i_t___k_b_y_t_e_s or _o_v_e_r_c_o_m_m_i_t___r_a_t_i_o can have an effect: if _o_v_e_r_c_o_m_m_i_t___k_b_y_t_e_s has a nonzero value, then it is used to calculate _C_o_m_m_i_t_L_i_m_i_t,  otherwise  _o_v_e_r_c_o_m_m_i_t___r_a_t_i_o  is
              used.  Writing a value to either of these files causes the value in the other file to be set to zero.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y
              This file contains the kernel virtual memory accounting mode.  Values are:

                     0: heuristic overcommit (this is the default)
                     1: always overcommit, never check
                     2: always check, never overcommit

              In mode 0, calls of mmmmaapp(2) with MMAAPP__NNOORREESSEERRVVEE are not checked, and the default check is very weak, leading to the risk of getting a process "OOM-killed".

              In  mode  1,  the kernel pretends there is always enough memory, until memory actually runs out.  One use case for this mode is scientific computing applications that employ large sparse
              arrays.  In Linux kernel versions before 2.6.0, any nonzero value implies mode 1.

              In mode 2 (available since Linux 2.6), the total virtual address space that can be allocated (_C_o_m_m_i_t_L_i_m_i_t in _/_p_r_o_c_/_m_e_m_i_n_f_o) is calculated as

                  CommitLimit = (total_RAM - total_huge_TLB) *
                                overcommit_ratio / 100 + total_swap

              where:

                   *  _t_o_t_a_l___R_A_M is the total amount of RAM on the system;

                   *  _t_o_t_a_l___h_u_g_e___T_L_B is the amount of memory set aside for huge pages;

                   *  _o_v_e_r_c_o_m_m_i_t___r_a_t_i_o is the value in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___r_a_t_i_o; and

                   *  _t_o_t_a_l___s_w_a_p is the amount of swap space.

              For example, on a system with 16GB of physical RAM, 16GB of swap, no space dedicated to huge pages, and an _o_v_e_r_c_o_m_m_i_t___r_a_t_i_o of 50, this formula yields a _C_o_m_m_i_t_L_i_m_i_t of 24GB.

              Since Linux 3.14, if the value in _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___k_b_y_t_e_s is nonzero, then _C_o_m_m_i_t_L_i_m_i_t is instead calculated as:

                  CommitLimit = overcommit_kbytes + total_swap

              See also the description of _/_p_r_o_c_/_s_y_s_/_v_m_/_a_d_m_i_n___r_e_s_e_r_v_e___k_b_y_t_e_s and _/_p_r_o_c_/_s_y_s_/_v_m_/_u_s_e_r___r_e_s_e_r_v_e___k_b_y_t_e_s.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___r_a_t_i_o (since Linux 2.6.0)
              This writable file defines a percentage by which memory can be overcommitted.  The default value in the file is 50.  See the description of _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_p_a_n_i_c___o_n___o_o_m (since Linux 2.6.18)
              This enables or disables a kernel panic in an out-of-memory situation.

              If this file is set to the value 0, the kernel's OOM-killer will kill some rogue process.  Usually, the OOM-killer is able to kill a rogue process and the system will survive.

              If this file is set to the value 1, then the kernel normally panics when out-of-memory happens.  However, if a process limits allocations to certain nodes using memory policies (mmbbiinndd(2)
              MMPPOOLL__BBIINNDD)  or cpusets (ccppuusseett(7)) and those nodes reach memory exhaustion status, one process may be killed by the OOM-killer.  No panic occurs in this case: because other nodes' memory
              may be free, this means the system as a whole may not have reached an out-of-memory situation yet.

              If this file is set to the value 2, the kernel always panics when an out-of-memory condition occurs.

              The default value is 0.  1 and 2 are for failover of clustering.  Select either according to your policy of failover.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_s_w_a_p_p_i_n_e_s_s
              The value in this file controls how aggressively the kernel will swap memory pages.  Higher values increase aggressiveness, lower values decrease aggressiveness.  The  default  value  is
              60.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_u_s_e_r___r_e_s_e_r_v_e___k_b_y_t_e_s (since Linux 3.10)
              Specifies  an  amount  of  memory  (in KiB) to reserve for user processes, This is intended to prevent a user from starting a single memory hogging process, such that they cannot recover
              (kill the hog).  The value in this file has an effect only when _/_p_r_o_c_/_s_y_s_/_v_m_/_o_v_e_r_c_o_m_m_i_t___m_e_m_o_r_y is set to 2 ("overcommit never" mode).  In this case, the system reserves an amount of mem‐
              ory that is the minimum of [3% of current process size, _u_s_e_r___r_e_s_e_r_v_e___k_b_y_t_e_s].

              The default value in this file is the minimum of [3% of free pages, 128MiB] expressed as KiB.

              If  the value in this file is set to zero, then a user will be allowed to allocate all free memory with a single process (minus the amount reserved by _/_p_r_o_c_/_s_y_s_/_v_m_/_a_d_m_i_n___r_e_s_e_r_v_e___k_b_y_t_e_s).
              Any subsequent attempts to execute a command will result in "fork: Cannot allocate memory".

              Changing the value in this file takes effect whenever an application requests memory.

       _/_p_r_o_c_/_s_y_s_/_v_m_/_u_n_p_r_i_v_i_l_e_g_e_d___u_s_e_r_f_a_u_l_t_f_d (since Linux 5.2)
              This (writable) file exposes a flag that controls whether unprivileged processes are allowed to employ uusseerrffaauullttffdd(2).  If this file has the value 1, then unprivileged processes may  use
              uusseerrffaauullttffdd(2).  If this file has the value 0, then only processes that have the CCAAPP__SSYYSS__PPTTRRAACCEE capability may employ uusseerrffaauullttffdd(2).  The default value in this file is 1.

       _/_p_r_o_c_/_s_y_s_r_q_-_t_r_i_g_g_e_r (since Linux 2.4.21)
              Writing a character to this file triggers the same SysRq function as typing ALT-SysRq-<character> (see the description of _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_s_y_s_r_q).  This file is normally writable only by
              _r_o_o_t.  For further details see the Linux kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_s_y_s_r_q_._r_s_t (or _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_r_q_._t_x_t before Linux 4.10).

       _/_p_r_o_c_/_s_y_s_v_i_p_c
              Subdirectory containing the pseudo-files _m_s_g, _s_e_m and _s_h_m.  These files list the System V Interprocess Communication (IPC) objects (respectively: message queues, semaphores,  and  shared
              memory)  that  currently  exist on the system, providing similar information to that available via iippccss(1).  These files have headers and are formatted (one IPC object per line) for easy
              understanding.  ssyyssvviippcc(7) provides further background on the information shown by these files.

       _/_p_r_o_c_/_t_h_r_e_a_d_-_s_e_l_f (since Linux 3.17)
              This directory refers to the thread accessing the _/_p_r_o_c filesystem, and is identical to the _/_p_r_o_c_/_s_e_l_f_/_t_a_s_k_/_[_t_i_d_] directory named by the process thread ID (_[_t_i_d_]) of the same thread.

       _/_p_r_o_c_/_t_i_m_e_r___l_i_s_t (since Linux 2.6.21)
              This read-only file exposes a list of all currently pending (high-resolution) timers, all clock-event sources, and their parameters in a human-readable form.

       _/_p_r_o_c_/_t_i_m_e_r___s_t_a_t_s (from  Linux 2.6.21 until Linux 4.10)
              This is a debugging facility to make timer (ab)use in a Linux system visible to kernel and user-space developers.  It can be used by kernel and user-space developers to verify that their
              code does not make undue use of timers.  The goal is to avoid unnecessary wakeups, thereby optimizing power consumption.

              If  enabled  in  the kernel (CCOONNFFIIGG__TTIIMMEERR__SSTTAATTSS), but not used, it has almost zero run-time overhead and a relatively small data-structure overhead.  Even if collection is enabled at run
              time, overhead is low: all the locking is per-CPU and lookup is hashed.

              The _/_p_r_o_c_/_t_i_m_e_r___s_t_a_t_s file is used both to control sampling facility and to read out the sampled information.

              The _t_i_m_e_r___s_t_a_t_s functionality is inactive on bootup.  A sampling period can be started using the following command:

                  # echo 1 > /proc/timer_stats

              The following command stops a sampling period:

                  # echo 0 > /proc/timer_stats

              The statistics can be retrieved by:

                  $ cat /proc/timer_stats

              While sampling is enabled, each readout from _/_p_r_o_c_/_t_i_m_e_r___s_t_a_t_s will see newly updated statistics.  Once sampling is disabled, the sampled information is kept until a new sample period is
              started.  This allows multiple readouts.

              Sample output from _/_p_r_o_c_/_t_i_m_e_r___s_t_a_t_s:

    $ ccaatt //pprroocc//ttiimmeerr__ssttaattss
    Timer Stats Version: v0.3
    Sample period: 1.764 s
    Collection: active
      255,     0 swapper/3        hrtimer_start_range_ns (tick_sched_timer)
       71,     0 swapper/1        hrtimer_start_range_ns (tick_sched_timer)
       58,     0 swapper/0        hrtimer_start_range_ns (tick_sched_timer)
        4,  1694 gnome-shell      mod_delayed_work_on (delayed_work_timer_fn)
       17,     7 rcu_sched        rcu_gp_kthread (process_timeout)
    ...
        1,  4911 kworker/u16:0    mod_delayed_work_on (delayed_work_timer_fn)
       1D,  2522 kworker/0:0      queue_delayed_work_on (delayed_work_timer_fn)
    1029 total events, 583.333 events/sec

              The output columns are:

              *  a count of the number of events, optionally (since Linux 2.6.23) followed by the letter 'D' if this is a deferrable timer;

              *  the PID of the process that initialized the timer;

              *  the name of the process that initialized the timer;

              *  the function where the timer was initialized; and

              *  (in parentheses) the callback function that is associated with the timer.

              During the Linux 4.11 development cycle, this file  was removed because of security concerns, as it exposes information across namespaces.  Furthermore, it is possible to obtain the same
              information via in-kernel tracing facilities such as ftrace.

       _/_p_r_o_c_/_t_t_y
              Subdirectory containing the pseudo-files and subdirectories for tty drivers and line disciplines.

       _/_p_r_o_c_/_u_p_t_i_m_e
              This file contains two numbers (values in seconds): the uptime of the system (including time spent in suspend) and the amount of time spent in the idle process.

       _/_p_r_o_c_/_v_e_r_s_i_o_n
              This string identifies the kernel version that is currently running.  It includes the contents of _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_t_y_p_e, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_o_s_r_e_l_e_a_s_e and  _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_v_e_r_s_i_o_n.   For
              example:

        Linux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994

       _/_p_r_o_c_/_v_m_s_t_a_t (since Linux 2.6.0)
              This  file displays various virtual memory statistics.  Each line of this file contains a single name-value pair, delimited by white space.  Some lines are present only if the kernel was
              configured with suitable options.  (In some cases, the options required for particular files have changed across kernel versions, so they are not listed here.  Details can  be  found  by
              consulting the kernel source code.)  The following fields may be present:

              _n_r___f_r_e_e___p_a_g_e_s (since Linux 2.6.31)

              _n_r___a_l_l_o_c___b_a_t_c_h (since Linux 3.12)

              _n_r___i_n_a_c_t_i_v_e___a_n_o_n (since Linux 2.6.28)

              _n_r___a_c_t_i_v_e___a_n_o_n (since Linux 2.6.28)

              _n_r___i_n_a_c_t_i_v_e___f_i_l_e (since Linux 2.6.28)

              _n_r___a_c_t_i_v_e___f_i_l_e (since Linux 2.6.28)

              _n_r___u_n_e_v_i_c_t_a_b_l_e (since Linux 2.6.28)

              _n_r___m_l_o_c_k (since Linux 2.6.28)

              _n_r___a_n_o_n___p_a_g_e_s (since Linux 2.6.18)

              _n_r___m_a_p_p_e_d (since Linux 2.6.0)

              _n_r___f_i_l_e___p_a_g_e_s (since Linux 2.6.18)

              _n_r___d_i_r_t_y (since Linux 2.6.0)

              _n_r___w_r_i_t_e_b_a_c_k (since Linux 2.6.0)

              _n_r___s_l_a_b___r_e_c_l_a_i_m_a_b_l_e (since Linux 2.6.19)

              _n_r___s_l_a_b___u_n_r_e_c_l_a_i_m_a_b_l_e (since Linux 2.6.19)

              _n_r___p_a_g_e___t_a_b_l_e___p_a_g_e_s (since Linux 2.6.0)

              _n_r___k_e_r_n_e_l___s_t_a_c_k (since Linux 2.6.32)
                     Amount of memory allocated to kernel stacks.

              _n_r___u_n_s_t_a_b_l_e (since Linux 2.6.0)

              _n_r___b_o_u_n_c_e (since Linux 2.6.12)

              _n_r___v_m_s_c_a_n___w_r_i_t_e (since Linux 2.6.19)

              _n_r___v_m_s_c_a_n___i_m_m_e_d_i_a_t_e___r_e_c_l_a_i_m (since Linux 3.2)

              _n_r___w_r_i_t_e_b_a_c_k___t_e_m_p (since Linux 2.6.26)

              _n_r___i_s_o_l_a_t_e_d___a_n_o_n (since Linux 2.6.32)

              _n_r___i_s_o_l_a_t_e_d___f_i_l_e (since Linux 2.6.32)

              _n_r___s_h_m_e_m (since Linux 2.6.32)
                     Pages used by shmem and ttmmppffss(5).

              _n_r___d_i_r_t_i_e_d (since Linux 2.6.37)

              _n_r___w_r_i_t_t_e_n (since Linux 2.6.37)

              _n_r___p_a_g_e_s___s_c_a_n_n_e_d (since Linux 3.17)

              _n_u_m_a___h_i_t (since Linux 2.6.18)

              _n_u_m_a___m_i_s_s (since Linux 2.6.18)

              _n_u_m_a___f_o_r_e_i_g_n (since Linux 2.6.18)

              _n_u_m_a___i_n_t_e_r_l_e_a_v_e (since Linux 2.6.18)

              _n_u_m_a___l_o_c_a_l (since Linux 2.6.18)

              _n_u_m_a___o_t_h_e_r (since Linux 2.6.18)

              _w_o_r_k_i_n_g_s_e_t___r_e_f_a_u_l_t (since Linux 3.15)

              _w_o_r_k_i_n_g_s_e_t___a_c_t_i_v_a_t_e (since Linux 3.15)

              _w_o_r_k_i_n_g_s_e_t___n_o_d_e_r_e_c_l_a_i_m (since Linux 3.15)

              _n_r___a_n_o_n___t_r_a_n_s_p_a_r_e_n_t___h_u_g_e_p_a_g_e_s (since Linux 2.6.38)

              _n_r___f_r_e_e___c_m_a (since Linux 3.7)
                     Number of free CMA (Contiguous Memory Allocator) pages.

              _n_r___d_i_r_t_y___t_h_r_e_s_h_o_l_d (since Linux 2.6.37)

              _n_r___d_i_r_t_y___b_a_c_k_g_r_o_u_n_d___t_h_r_e_s_h_o_l_d (since Linux 2.6.37)

              _p_g_p_g_i_n (since Linux 2.6.0)

              _p_g_p_g_o_u_t (since Linux 2.6.0)

              _p_s_w_p_i_n (since Linux 2.6.0)

              _p_s_w_p_o_u_t (since Linux 2.6.0)

              _p_g_a_l_l_o_c___d_m_a (since Linux 2.6.5)

              _p_g_a_l_l_o_c___d_m_a_3_2 (since Linux 2.6.16)

              _p_g_a_l_l_o_c___n_o_r_m_a_l (since Linux 2.6.5)

              _p_g_a_l_l_o_c___h_i_g_h (since Linux 2.6.5)

              _p_g_a_l_l_o_c___m_o_v_a_b_l_e (since Linux 2.6.23)

              _p_g_f_r_e_e (since Linux 2.6.0)

              _p_g_a_c_t_i_v_a_t_e (since Linux 2.6.0)

              _p_g_d_e_a_c_t_i_v_a_t_e (since Linux 2.6.0)

              _p_g_f_a_u_l_t (since Linux 2.6.0)

              _p_g_m_a_j_f_a_u_l_t (since Linux 2.6.0)

              _p_g_r_e_f_i_l_l___d_m_a (since Linux 2.6.5)

              _p_g_r_e_f_i_l_l___d_m_a_3_2 (since Linux 2.6.16)

              _p_g_r_e_f_i_l_l___n_o_r_m_a_l (since Linux 2.6.5)

              _p_g_r_e_f_i_l_l___h_i_g_h (since Linux 2.6.5)

              _p_g_r_e_f_i_l_l___m_o_v_a_b_l_e (since Linux 2.6.23)

              _p_g_s_t_e_a_l___k_s_w_a_p_d___d_m_a (since Linux 3.4)

              _p_g_s_t_e_a_l___k_s_w_a_p_d___d_m_a_3_2 (since Linux 3.4)

              _p_g_s_t_e_a_l___k_s_w_a_p_d___n_o_r_m_a_l (since Linux 3.4)

              _p_g_s_t_e_a_l___k_s_w_a_p_d___h_i_g_h (since Linux 3.4)

              _p_g_s_t_e_a_l___k_s_w_a_p_d___m_o_v_a_b_l_e (since Linux 3.4)

              _p_g_s_t_e_a_l___d_i_r_e_c_t___d_m_a

              _p_g_s_t_e_a_l___d_i_r_e_c_t___d_m_a_3_2 (since Linux 3.4)

              _p_g_s_t_e_a_l___d_i_r_e_c_t___n_o_r_m_a_l (since Linux 3.4)

              _p_g_s_t_e_a_l___d_i_r_e_c_t___h_i_g_h (since Linux 3.4)

              _p_g_s_t_e_a_l___d_i_r_e_c_t___m_o_v_a_b_l_e (since Linux 2.6.23)

              _p_g_s_c_a_n___k_s_w_a_p_d___d_m_a

              _p_g_s_c_a_n___k_s_w_a_p_d___d_m_a_3_2 (since Linux 2.6.16)

              _p_g_s_c_a_n___k_s_w_a_p_d___n_o_r_m_a_l (since Linux 2.6.5)

              _p_g_s_c_a_n___k_s_w_a_p_d___h_i_g_h

              _p_g_s_c_a_n___k_s_w_a_p_d___m_o_v_a_b_l_e (since Linux 2.6.23)

              _p_g_s_c_a_n___d_i_r_e_c_t___d_m_a

              _p_g_s_c_a_n___d_i_r_e_c_t___d_m_a_3_2 (since Linux 2.6.16)

              _p_g_s_c_a_n___d_i_r_e_c_t___n_o_r_m_a_l

              _p_g_s_c_a_n___d_i_r_e_c_t___h_i_g_h

              _p_g_s_c_a_n___d_i_r_e_c_t___m_o_v_a_b_l_e (since Linux 2.6.23)

              _p_g_s_c_a_n___d_i_r_e_c_t___t_h_r_o_t_t_l_e (since Linux 3.6)

              _z_o_n_e___r_e_c_l_a_i_m___f_a_i_l_e_d (since linux 2.6.31)

              _p_g_i_n_o_d_e_s_t_e_a_l (since linux 2.6.0)

              _s_l_a_b_s___s_c_a_n_n_e_d (since linux 2.6.5)

              _k_s_w_a_p_d___i_n_o_d_e_s_t_e_a_l (since linux 2.6.0)

              _k_s_w_a_p_d___l_o_w___w_m_a_r_k___h_i_t___q_u_i_c_k_l_y (since 2.6.33)

              _k_s_w_a_p_d___h_i_g_h___w_m_a_r_k___h_i_t___q_u_i_c_k_l_y (since 2.6.33)

              _p_a_g_e_o_u_t_r_u_n (since Linux 2.6.0)

              _a_l_l_o_c_s_t_a_l_l (since Linux 2.6.0)

              _p_g_r_o_t_a_t_e_d (since Linux 2.6.0)

              _d_r_o_p___p_a_g_e_c_a_c_h_e (since Linux 3.15)

              _d_r_o_p___s_l_a_b (since Linux 3.15)

              _n_u_m_a___p_t_e___u_p_d_a_t_e_s (since Linux 3.8)

              _n_u_m_a___h_u_g_e___p_t_e___u_p_d_a_t_e_s (since Linux 3.13)

              _n_u_m_a___h_i_n_t___f_a_u_l_t_s (since Linux 3.8)

              _n_u_m_a___h_i_n_t___f_a_u_l_t_s___l_o_c_a_l (since Linux 3.8)

              _n_u_m_a___p_a_g_e_s___m_i_g_r_a_t_e_d (since Linux 3.8)

              _p_g_m_i_g_r_a_t_e___s_u_c_c_e_s_s (since Linux 3.8)

              _p_g_m_i_g_r_a_t_e___f_a_i_l (since Linux 3.8)

              _c_o_m_p_a_c_t___m_i_g_r_a_t_e___s_c_a_n_n_e_d (since Linux 3.8)

              _c_o_m_p_a_c_t___f_r_e_e___s_c_a_n_n_e_d (since Linux 3.8)

              _c_o_m_p_a_c_t___i_s_o_l_a_t_e_d (since Linux 3.8)

              _c_o_m_p_a_c_t___s_t_a_l_l (since Linux 2.6.35)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _c_o_m_p_a_c_t___f_a_i_l (since Linux 2.6.35)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _c_o_m_p_a_c_t___s_u_c_c_e_s_s (since Linux 2.6.35)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _h_t_l_b___b_u_d_d_y___a_l_l_o_c___s_u_c_c_e_s_s (since Linux 2.6.26)

              _h_t_l_b___b_u_d_d_y___a_l_l_o_c___f_a_i_l (since Linux 2.6.26)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___c_u_l_l_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___s_c_a_n_n_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___r_e_s_c_u_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___m_l_o_c_k_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___m_u_n_l_o_c_k_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___c_l_e_a_r_e_d (since Linux 2.6.28)

              _u_n_e_v_i_c_t_a_b_l_e___p_g_s___s_t_r_a_n_d_e_d (since Linux 2.6.28)

              _t_h_p___f_a_u_l_t___a_l_l_o_c (since Linux 2.6.39)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___f_a_u_l_t___f_a_l_l_b_a_c_k (since Linux 2.6.39)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___c_o_l_l_a_p_s_e___a_l_l_o_c (since Linux 2.6.39)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___c_o_l_l_a_p_s_e___a_l_l_o_c___f_a_i_l_e_d (since Linux 2.6.39)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___s_p_l_i_t (since Linux 2.6.39)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___z_e_r_o___p_a_g_e___a_l_l_o_c (since Linux 3.8)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _t_h_p___z_e_r_o___p_a_g_e___a_l_l_o_c___f_a_i_l_e_d (since Linux 3.8)
                     See the kernel source file _D_o_c_u_m_e_n_t_a_t_i_o_n_/_a_d_m_i_n_-_g_u_i_d_e_/_m_m_/_t_r_a_n_s_h_u_g_e_._r_s_t.

              _b_a_l_l_o_o_n___i_n_f_l_a_t_e (since Linux 3.18)

              _b_a_l_l_o_o_n___d_e_f_l_a_t_e (since Linux 3.18)

              _b_a_l_l_o_o_n___m_i_g_r_a_t_e (since Linux 3.18)

              _n_r___t_l_b___r_e_m_o_t_e___f_l_u_s_h (since Linux 3.12)

              _n_r___t_l_b___r_e_m_o_t_e___f_l_u_s_h___r_e_c_e_i_v_e_d (since Linux 3.12)

              _n_r___t_l_b___l_o_c_a_l___f_l_u_s_h___a_l_l (since Linux 3.12)

              _n_r___t_l_b___l_o_c_a_l___f_l_u_s_h___o_n_e (since Linux 3.12)

              _v_m_a_c_a_c_h_e___f_i_n_d___c_a_l_l_s (since Linux 3.16)

              _v_m_a_c_a_c_h_e___f_i_n_d___h_i_t_s (since Linux 3.16)

              _v_m_a_c_a_c_h_e___f_u_l_l___f_l_u_s_h_e_s (since Linux 3.19)

       _/_p_r_o_c_/_z_o_n_e_i_n_f_o (since Linux 2.6.13)
              This file display information about memory zones.  This is useful for analyzing virtual memory behavior.

NNOOTTEESS
       Many  files  contain  strings (e.g., the environment and command line) that are in the internal format, with subfields terminated by null bytes ('\0').  When inspecting such files, you may find
       that the results are more readable if you use a command of the following form to display them:

           $ ccaatt _f_i_l_e || ttrr ''\\000000'' ''\\nn''

       This manual page is incomplete, possibly inaccurate, and is the kind of thing that needs to be updated very often.

SSEEEE AALLSSOO
       ccaatt(1), ddmmeessgg(1), ffiinndd(1), ffrreeee(1), hhttoopp(1), iinniitt(1), ppss(1), ppssttrreeee(1), ttrr(1), uuppttiimmee(1), cchhrroooott(2), mmmmaapp(2), rreeaaddlliinnkk(2), ssyysslloogg(2), ssllaabbiinnffoo(5),  ssyyssffss(5),  hhiieerr(7),  nnaammeessppaacceess(7),  ttiimmee(7),
       aarrpp(8), hhddppaarrmm(8), iiffccoonnffiigg(8), llssmmoodd(8), llssppccii(8), mmoouunntt(8), nneettssttaatt(8), pprroocciinnffoo(8), rroouuttee(8), ssyyssccttll(8)

       The Linux kernel source files: _D_o_c_u_m_e_n_t_a_t_i_o_n_/_f_i_l_e_s_y_s_t_e_m_s_/_p_r_o_c_._t_x_t, _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_c_t_l_/_f_s_._t_x_t, _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_c_t_l_/_k_e_r_n_e_l_._t_x_t, _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_c_t_l_/_n_e_t_._t_x_t, and _D_o_c_u_m_e_n_t_a_t_i_o_n_/_s_y_s_c_t_l_/_v_m_._t_x_t.

CCOOLLOOPPHHOONN
       This  page  is  part  of  release  5.05  of  the  Linux  _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at
       https://www.kernel.org/doc/man-pages/.

Linux                                                                                          2019-11-19                                                                                        PROC(5)
